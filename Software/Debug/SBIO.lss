
SBIO.elf:     Dateiformat elf32-avr

Sektionen:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000012b2  00001346  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b4  00800136  00800136  0000137c  2**0
                  ALLOC
  3 .stab         000017ac  00000000  00000000  0000137c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001103  00000000  00000000  00002b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003c2b  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003c3c  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00003c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  000043f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00004b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027e  00000000  00000000  00004b2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 eb       	ldi	r30, 0xB2	; 178
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a6 33       	cpi	r26, 0x36	; 54
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	21 e0       	ldi	r18, 0x01	; 1
      b0:	a6 e3       	ldi	r26, 0x36	; 54
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	aa 3e       	cpi	r26, 0xEA	; 234
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 33 05 	call	0xa66	; 0xa66 <main>
      c2:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <UART_Init>:




void UART_Init(UART *UART)
{
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	00 d0       	rcall	.+0      	; 0xd0 <UART_Init+0x6>
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
      d4:	9a 83       	std	Y+2, r25	; 0x02
      d6:	89 83       	std	Y+1, r24	; 0x01

	//RXD-PIN als Eingang
	DDRD &= ~(1<<0);
      d8:	81 e3       	ldi	r24, 0x31	; 49
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	21 e3       	ldi	r18, 0x31	; 49
      de:	30 e0       	ldi	r19, 0x00	; 0
      e0:	f9 01       	movw	r30, r18
      e2:	20 81       	ld	r18, Z
      e4:	2e 7f       	andi	r18, 0xFE	; 254
      e6:	fc 01       	movw	r30, r24
      e8:	20 83       	st	Z, r18

	//USART Baud rate: 9600
	UBRR0H = MYUBRR >> 8;
      ea:	80 e9       	ldi	r24, 0x90	; 144
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	fc 01       	movw	r30, r24
      f0:	10 82       	st	Z, r1
	UBRR0L = MYUBRR;
      f2:	89 e2       	ldi	r24, 0x29	; 41
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	29 e1       	ldi	r18, 0x19	; 25
      f8:	fc 01       	movw	r30, r24
      fa:	20 83       	st	Z, r18
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
      fc:	8a e2       	ldi	r24, 0x2A	; 42
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	28 e9       	ldi	r18, 0x98	; 152
     102:	fc 01       	movw	r30, r24
     104:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     106:	85 e9       	ldi	r24, 0x95	; 149
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	26 e0       	ldi	r18, 0x06	; 6
     10c:	fc 01       	movw	r30, r24
     10e:	20 83       	st	Z, r18
	
	//Wichtig für printf
	stdout = &mystdout;
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	91 e0       	ldi	r25, 0x01	; 1
     114:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <__iob+0x3>
     118:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <__iob+0x2>
	
	UART->RX_Complete = 0;
     11c:	89 81       	ldd	r24, Y+1	; 0x01
     11e:	9a 81       	ldd	r25, Y+2	; 0x02
     120:	80 58       	subi	r24, 0x80	; 128
     122:	9f 4f       	sbci	r25, 0xFF	; 255
     124:	fc 01       	movw	r30, r24
     126:	10 82       	st	Z, r1
	
	sei();
     128:	78 94       	sei
}
     12a:	00 00       	nop
     12c:	0f 90       	pop	r0
     12e:	0f 90       	pop	r0
     130:	df 91       	pop	r29
     132:	cf 91       	pop	r28
     134:	08 95       	ret

00000136 <UART_TX>:

static int UART_TX(char c, FILE *stream)
{
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	00 d0       	rcall	.+0      	; 0x13c <UART_TX+0x6>
     13c:	1f 92       	push	r1
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
     142:	89 83       	std	Y+1, r24	; 0x01
     144:	7b 83       	std	Y+3, r23	; 0x03
     146:	6a 83       	std	Y+2, r22	; 0x02
	if (c == '\n') UART_TX('\r', stream);
     148:	89 81       	ldd	r24, Y+1	; 0x01
     14a:	8a 30       	cpi	r24, 0x0A	; 10
     14c:	31 f4       	brne	.+12     	; 0x15a <UART_TX+0x24>
     14e:	8a 81       	ldd	r24, Y+2	; 0x02
     150:	9b 81       	ldd	r25, Y+3	; 0x03
     152:	bc 01       	movw	r22, r24
     154:	8d e0       	ldi	r24, 0x0D	; 13
     156:	0e 94 9b 00 	call	0x136	; 0x136 <UART_TX>
	
	loop_until_bit_is_set(UCSR0A, UDRE0);
     15a:	8b e2       	ldi	r24, 0x2B	; 43
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	fc 01       	movw	r30, r24
     160:	80 81       	ld	r24, Z
     162:	88 2f       	mov	r24, r24
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	80 72       	andi	r24, 0x20	; 32
     168:	99 27       	eor	r25, r25
     16a:	89 2b       	or	r24, r25
     16c:	b1 f3       	breq	.-20     	; 0x15a <UART_TX+0x24>
	UDR0 = c;
     16e:	8c e2       	ldi	r24, 0x2C	; 44
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	29 81       	ldd	r18, Y+1	; 0x01
     174:	fc 01       	movw	r30, r24
     176:	20 83       	st	Z, r18

	return 0;
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	90 e0       	ldi	r25, 0x00	; 0
} 
     17c:	0f 90       	pop	r0
     17e:	0f 90       	pop	r0
     180:	0f 90       	pop	r0
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	08 95       	ret

00000188 <USART_RX_vect>:



ISR(USART_RX_vect)
{
     188:	1f 92       	push	r1
     18a:	0f 92       	push	r0
     18c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     190:	0f 92       	push	r0
     192:	11 24       	eor	r1, r1
     194:	2f 93       	push	r18
     196:	8f 93       	push	r24
     198:	9f 93       	push	r25
     19a:	ef 93       	push	r30
     19c:	ff 93       	push	r31
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	1f 92       	push	r1
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62
	static uint8_t RX_Counter = 0;
	
	if (!UART0.RX_Complete)
     1a8:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <UART0+0x80>
     1ac:	88 23       	and	r24, r24
     1ae:	31 f5       	brne	.+76     	; 0x1fc <USART_RX_vect+0x74>
	{
		char local_RX = UDR0;
     1b0:	8c e2       	ldi	r24, 0x2C	; 44
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	fc 01       	movw	r30, r24
     1b6:	80 81       	ld	r24, Z
     1b8:	89 83       	std	Y+1, r24	; 0x01
		
		if (local_RX == '{') RX_Counter = 0;
     1ba:	89 81       	ldd	r24, Y+1	; 0x01
     1bc:	8b 37       	cpi	r24, 0x7B	; 123
     1be:	11 f4       	brne	.+4      	; 0x1c4 <USART_RX_vect+0x3c>
     1c0:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
			
		if (local_RX == '}')
     1c4:	89 81       	ldd	r24, Y+1	; 0x01
     1c6:	8d 37       	cpi	r24, 0x7D	; 125
     1c8:	39 f4       	brne	.+14     	; 0x1d8 <USART_RX_vect+0x50>
		{
			UART0.RX_Complete = 1;
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <UART0+0x80>
			UART0.RX_Global_Counter = RX_Counter;
     1d0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     1d4:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <UART0+0x81>
		}
		
		if (RX_Counter <= (RX_Buffer_size - 1))
     1d8:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     1dc:	88 23       	and	r24, r24
     1de:	74 f0       	brlt	.+28     	; 0x1fc <USART_RX_vect+0x74>
		{
			UART0.RX_Buf[RX_Counter] = local_RX;
     1e0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     1e4:	88 2f       	mov	r24, r24
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	87 5c       	subi	r24, 0xC7	; 199
     1ea:	9e 4f       	sbci	r25, 0xFE	; 254
     1ec:	29 81       	ldd	r18, Y+1	; 0x01
     1ee:	fc 01       	movw	r30, r24
     1f0:	20 83       	st	Z, r18
			RX_Counter++;
     1f2:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     1f6:	8f 5f       	subi	r24, 0xFF	; 255
     1f8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
		}
	}
}
     1fc:	00 00       	nop
     1fe:	0f 90       	pop	r0
     200:	df 91       	pop	r29
     202:	cf 91       	pop	r28
     204:	ff 91       	pop	r31
     206:	ef 91       	pop	r30
     208:	9f 91       	pop	r25
     20a:	8f 91       	pop	r24
     20c:	2f 91       	pop	r18
     20e:	0f 90       	pop	r0
     210:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     214:	0f 90       	pop	r0
     216:	1f 90       	pop	r1
     218:	18 95       	reti

0000021a <UART_RX_Handler>:
#include <string.h>
#include "UART_Routine.h"


void UART_RX_Handler(UART *UART0)
{
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	00 d0       	rcall	.+0      	; 0x220 <UART_RX_Handler+0x6>
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
     224:	9a 83       	std	Y+2, r25	; 0x02
     226:	89 83       	std	Y+1, r24	; 0x01
	if (UART0->RX_Complete)
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	9a 81       	ldd	r25, Y+2	; 0x02
     22c:	80 58       	subi	r24, 0x80	; 128
     22e:	9f 4f       	sbci	r25, 0xFF	; 255
     230:	fc 01       	movw	r30, r24
     232:	80 81       	ld	r24, Z
     234:	88 23       	and	r24, r24
     236:	b1 f1       	breq	.+108    	; 0x2a4 <UART_RX_Handler+0x8a>
	{
		if (strncmp(UART0->RX_Buf, "{TASK1}", UART0->RX_Global_Counter) == 0) UART0->RX_Task[TASK1] = 1;
     238:	89 81       	ldd	r24, Y+1	; 0x01
     23a:	9a 81       	ldd	r25, Y+2	; 0x02
     23c:	8f 57       	subi	r24, 0x7F	; 127
     23e:	9f 4f       	sbci	r25, 0xFF	; 255
     240:	fc 01       	movw	r30, r24
     242:	80 81       	ld	r24, Z
     244:	28 2f       	mov	r18, r24
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	89 81       	ldd	r24, Y+1	; 0x01
     24a:	9a 81       	ldd	r25, Y+2	; 0x02
     24c:	a9 01       	movw	r20, r18
     24e:	6e e0       	ldi	r22, 0x0E	; 14
     250:	71 e0       	ldi	r23, 0x01	; 1
     252:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <strncmp>
     256:	89 2b       	or	r24, r25
     258:	39 f4       	brne	.+14     	; 0x268 <UART_RX_Handler+0x4e>
     25a:	89 81       	ldd	r24, Y+1	; 0x01
     25c:	9a 81       	ldd	r25, Y+2	; 0x02
     25e:	8d 57       	subi	r24, 0x7D	; 125
     260:	9f 4f       	sbci	r25, 0xFF	; 255
     262:	21 e0       	ldi	r18, 0x01	; 1
     264:	fc 01       	movw	r30, r24
     266:	20 83       	st	Z, r18
		if (strncmp(UART0->RX_Buf, "{TASK2}", UART0->RX_Global_Counter) == 0) UART0->RX_Task[TASK2] = 1;
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	9a 81       	ldd	r25, Y+2	; 0x02
     26c:	8f 57       	subi	r24, 0x7F	; 127
     26e:	9f 4f       	sbci	r25, 0xFF	; 255
     270:	fc 01       	movw	r30, r24
     272:	80 81       	ld	r24, Z
     274:	28 2f       	mov	r18, r24
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	89 81       	ldd	r24, Y+1	; 0x01
     27a:	9a 81       	ldd	r25, Y+2	; 0x02
     27c:	a9 01       	movw	r20, r18
     27e:	66 e1       	ldi	r22, 0x16	; 22
     280:	71 e0       	ldi	r23, 0x01	; 1
     282:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <strncmp>
     286:	89 2b       	or	r24, r25
     288:	39 f4       	brne	.+14     	; 0x298 <UART_RX_Handler+0x7e>
     28a:	89 81       	ldd	r24, Y+1	; 0x01
     28c:	9a 81       	ldd	r25, Y+2	; 0x02
     28e:	8c 57       	subi	r24, 0x7C	; 124
     290:	9f 4f       	sbci	r25, 0xFF	; 255
     292:	21 e0       	ldi	r18, 0x01	; 1
     294:	fc 01       	movw	r30, r24
     296:	20 83       	st	Z, r18


		UART0->RX_Complete = 0;
     298:	89 81       	ldd	r24, Y+1	; 0x01
     29a:	9a 81       	ldd	r25, Y+2	; 0x02
     29c:	80 58       	subi	r24, 0x80	; 128
     29e:	9f 4f       	sbci	r25, 0xFF	; 255
     2a0:	fc 01       	movw	r30, r24
     2a2:	10 82       	st	Z, r1
	}
	
}
     2a4:	00 00       	nop
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret

000002b0 <RX_Taskhandler>:

void RX_Taskhandler(UART *UART0)
{
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	00 d0       	rcall	.+0      	; 0x2b6 <RX_Taskhandler+0x6>
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	9a 83       	std	Y+2, r25	; 0x02
     2bc:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		/**************************************************
		*				    TASK 1						  *
		**************************************************/
		if (UART0->RX_Task[TASK1])
     2be:	89 81       	ldd	r24, Y+1	; 0x01
     2c0:	9a 81       	ldd	r25, Y+2	; 0x02
     2c2:	8d 57       	subi	r24, 0x7D	; 125
     2c4:	9f 4f       	sbci	r25, 0xFF	; 255
     2c6:	fc 01       	movw	r30, r24
     2c8:	80 81       	ld	r24, Z
     2ca:	88 23       	and	r24, r24
     2cc:	91 f0       	breq	.+36     	; 0x2f2 <RX_Taskhandler+0x42>
		{
			printf("Hallo TASK1");
     2ce:	8e e1       	ldi	r24, 0x1E	; 30
     2d0:	91 e0       	ldi	r25, 0x01	; 1
     2d2:	89 2f       	mov	r24, r25
     2d4:	8f 93       	push	r24
     2d6:	8e e1       	ldi	r24, 0x1E	; 30
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	8f 93       	push	r24
     2dc:	0e 94 79 06 	call	0xcf2	; 0xcf2 <printf>
     2e0:	0f 90       	pop	r0
     2e2:	0f 90       	pop	r0
			UART0->RX_Task[TASK1] = 0;
     2e4:	89 81       	ldd	r24, Y+1	; 0x01
     2e6:	9a 81       	ldd	r25, Y+2	; 0x02
     2e8:	8d 57       	subi	r24, 0x7D	; 125
     2ea:	9f 4f       	sbci	r25, 0xFF	; 255
     2ec:	fc 01       	movw	r30, r24
     2ee:	10 82       	st	Z, r1
			break;
     2f0:	23 c0       	rjmp	.+70     	; 0x338 <RX_Taskhandler+0x88>
		}
		/**************************************************
		*				    TASK 2						  *
		**************************************************/		
		if (UART0->RX_Task[TASK2])
     2f2:	89 81       	ldd	r24, Y+1	; 0x01
     2f4:	9a 81       	ldd	r25, Y+2	; 0x02
     2f6:	8c 57       	subi	r24, 0x7C	; 124
     2f8:	9f 4f       	sbci	r25, 0xFF	; 255
     2fa:	fc 01       	movw	r30, r24
     2fc:	80 81       	ld	r24, Z
     2fe:	88 23       	and	r24, r24
     300:	91 f0       	breq	.+36     	; 0x326 <RX_Taskhandler+0x76>
		{
			printf("Hallo TASK2");
     302:	8a e2       	ldi	r24, 0x2A	; 42
     304:	91 e0       	ldi	r25, 0x01	; 1
     306:	89 2f       	mov	r24, r25
     308:	8f 93       	push	r24
     30a:	8a e2       	ldi	r24, 0x2A	; 42
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	8f 93       	push	r24
     310:	0e 94 79 06 	call	0xcf2	; 0xcf2 <printf>
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
			UART0->RX_Task[TASK2] = 0;
     318:	89 81       	ldd	r24, Y+1	; 0x01
     31a:	9a 81       	ldd	r25, Y+2	; 0x02
     31c:	8c 57       	subi	r24, 0x7C	; 124
     31e:	9f 4f       	sbci	r25, 0xFF	; 255
     320:	fc 01       	movw	r30, r24
     322:	10 82       	st	Z, r1
			break;
     324:	09 c0       	rjmp	.+18     	; 0x338 <RX_Taskhandler+0x88>
		}
		counter++;
     326:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <counter.1961>
     32a:	8f 5f       	subi	r24, 0xFF	; 255
     32c:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <counter.1961>
		
	}
	while(counter <= (RX_Task_size - 1));
     330:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <counter.1961>
     334:	8a 30       	cpi	r24, 0x0A	; 10
     336:	18 f2       	brcs	.-122    	; 0x2be <RX_Taskhandler+0xe>
}
     338:	00 00       	nop
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	08 95       	ret

00000344 <Init_GPIO>:
#include "IO.h"



void Init_GPIO(PWM_Setting *PWM)
{
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	00 d0       	rcall	.+0      	; 0x34a <Init_GPIO+0x6>
     34a:	cd b7       	in	r28, 0x3d	; 61
     34c:	de b7       	in	r29, 0x3e	; 62
     34e:	9a 83       	std	Y+2, r25	; 0x02
     350:	89 83       	std	Y+1, r24	; 0x01
	//DDRX Output Conf
	DDRA |= (1<<Pumpe);
     352:	8a e3       	ldi	r24, 0x3A	; 58
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	2a e3       	ldi	r18, 0x3A	; 58
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	f9 01       	movw	r30, r18
     35c:	20 81       	ld	r18, Z
     35e:	28 60       	ori	r18, 0x08	; 8
     360:	fc 01       	movw	r30, r24
     362:	20 83       	st	Z, r18
	DDRA |= (1<<Heizung);
     364:	8a e3       	ldi	r24, 0x3A	; 58
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	2a e3       	ldi	r18, 0x3A	; 58
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	f9 01       	movw	r30, r18
     36e:	20 81       	ld	r18, Z
     370:	20 61       	ori	r18, 0x10	; 16
     372:	fc 01       	movw	r30, r24
     374:	20 83       	st	Z, r18
	DDRA |= (1<<Lufter1);
     376:	8a e3       	ldi	r24, 0x3A	; 58
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	2a e3       	ldi	r18, 0x3A	; 58
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	f9 01       	movw	r30, r18
     380:	20 81       	ld	r18, Z
     382:	20 62       	ori	r18, 0x20	; 32
     384:	fc 01       	movw	r30, r24
     386:	20 83       	st	Z, r18
	DDRA |= (1<<Lufter2);
     388:	8a e3       	ldi	r24, 0x3A	; 58
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	2a e3       	ldi	r18, 0x3A	; 58
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	f9 01       	movw	r30, r18
     392:	20 81       	ld	r18, Z
     394:	20 64       	ori	r18, 0x40	; 64
     396:	fc 01       	movw	r30, r24
     398:	20 83       	st	Z, r18

	DDRC |= (1<<Rot1);
     39a:	84 e3       	ldi	r24, 0x34	; 52
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	24 e3       	ldi	r18, 0x34	; 52
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	f9 01       	movw	r30, r18
     3a4:	20 81       	ld	r18, Z
     3a6:	20 64       	ori	r18, 0x40	; 64
     3a8:	fc 01       	movw	r30, r24
     3aa:	20 83       	st	Z, r18
	DDRC |= (1<<Grun1);
     3ac:	84 e3       	ldi	r24, 0x34	; 52
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	24 e3       	ldi	r18, 0x34	; 52
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	f9 01       	movw	r30, r18
     3b6:	20 81       	ld	r18, Z
     3b8:	20 62       	ori	r18, 0x20	; 32
     3ba:	fc 01       	movw	r30, r24
     3bc:	20 83       	st	Z, r18
	DDRC |= (1<<Blau1);
     3be:	84 e3       	ldi	r24, 0x34	; 52
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	24 e3       	ldi	r18, 0x34	; 52
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	f9 01       	movw	r30, r18
     3c8:	20 81       	ld	r18, Z
     3ca:	20 61       	ori	r18, 0x10	; 16
     3cc:	fc 01       	movw	r30, r24
     3ce:	20 83       	st	Z, r18

	DDRA |= (1<<Rot2);
     3d0:	8a e3       	ldi	r24, 0x3A	; 58
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	2a e3       	ldi	r18, 0x3A	; 58
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	f9 01       	movw	r30, r18
     3da:	20 81       	ld	r18, Z
     3dc:	20 68       	ori	r18, 0x80	; 128
     3de:	fc 01       	movw	r30, r24
     3e0:	20 83       	st	Z, r18
	DDRG |= (1<<Grun2);
     3e2:	84 e6       	ldi	r24, 0x64	; 100
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	24 e6       	ldi	r18, 0x64	; 100
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	f9 01       	movw	r30, r18
     3ec:	20 81       	ld	r18, Z
     3ee:	24 60       	ori	r18, 0x04	; 4
     3f0:	fc 01       	movw	r30, r24
     3f2:	20 83       	st	Z, r18
	DDRC |= (1<<Blau2);
     3f4:	84 e3       	ldi	r24, 0x34	; 52
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	24 e3       	ldi	r18, 0x34	; 52
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	f9 01       	movw	r30, r18
     3fe:	20 81       	ld	r18, Z
     400:	20 68       	ori	r18, 0x80	; 128
     402:	fc 01       	movw	r30, r24
     404:	20 83       	st	Z, r18

	DDRB |= (1<<Latch);
     406:	87 e3       	ldi	r24, 0x37	; 55
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	27 e3       	ldi	r18, 0x37	; 55
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	f9 01       	movw	r30, r18
     410:	20 81       	ld	r18, Z
     412:	20 64       	ori	r18, 0x40	; 64
     414:	fc 01       	movw	r30, r24
     416:	20 83       	st	Z, r18
	DDRB |= (1<<Daten);
     418:	87 e3       	ldi	r24, 0x37	; 55
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	27 e3       	ldi	r18, 0x37	; 55
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	f9 01       	movw	r30, r18
     422:	20 81       	ld	r18, Z
     424:	20 62       	ori	r18, 0x20	; 32
     426:	fc 01       	movw	r30, r24
     428:	20 83       	st	Z, r18
	DDRB |= (1<<Takt);
     42a:	87 e3       	ldi	r24, 0x37	; 55
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	27 e3       	ldi	r18, 0x37	; 55
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	f9 01       	movw	r30, r18
     434:	20 81       	ld	r18, Z
     436:	20 61       	ori	r18, 0x10	; 16
     438:	fc 01       	movw	r30, r24
     43a:	20 83       	st	Z, r18

	DDRD |= (1<<SM1_1);
     43c:	81 e3       	ldi	r24, 0x31	; 49
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	21 e3       	ldi	r18, 0x31	; 49
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	f9 01       	movw	r30, r18
     446:	20 81       	ld	r18, Z
     448:	20 64       	ori	r18, 0x40	; 64
     44a:	fc 01       	movw	r30, r24
     44c:	20 83       	st	Z, r18
	DDRD |= (1<<SM1_2);
     44e:	81 e3       	ldi	r24, 0x31	; 49
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	21 e3       	ldi	r18, 0x31	; 49
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	f9 01       	movw	r30, r18
     458:	20 81       	ld	r18, Z
     45a:	20 68       	ori	r18, 0x80	; 128
     45c:	fc 01       	movw	r30, r24
     45e:	20 83       	st	Z, r18
	DDRG |= (1<<SM1_3);
     460:	84 e6       	ldi	r24, 0x64	; 100
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	24 e6       	ldi	r18, 0x64	; 100
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	f9 01       	movw	r30, r18
     46a:	20 81       	ld	r18, Z
     46c:	21 60       	ori	r18, 0x01	; 1
     46e:	fc 01       	movw	r30, r24
     470:	20 83       	st	Z, r18
	DDRG |= (1<<SM1_4);
     472:	84 e6       	ldi	r24, 0x64	; 100
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	24 e6       	ldi	r18, 0x64	; 100
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	f9 01       	movw	r30, r18
     47c:	20 81       	ld	r18, Z
     47e:	22 60       	ori	r18, 0x02	; 2
     480:	fc 01       	movw	r30, r24
     482:	20 83       	st	Z, r18

	DDRC |= (1<<SM2_1);
     484:	84 e3       	ldi	r24, 0x34	; 52
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	24 e3       	ldi	r18, 0x34	; 52
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	f9 01       	movw	r30, r18
     48e:	20 81       	ld	r18, Z
     490:	21 60       	ori	r18, 0x01	; 1
     492:	fc 01       	movw	r30, r24
     494:	20 83       	st	Z, r18
	DDRC |= (1<<SM2_2);
     496:	84 e3       	ldi	r24, 0x34	; 52
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	24 e3       	ldi	r18, 0x34	; 52
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	f9 01       	movw	r30, r18
     4a0:	20 81       	ld	r18, Z
     4a2:	22 60       	ori	r18, 0x02	; 2
     4a4:	fc 01       	movw	r30, r24
     4a6:	20 83       	st	Z, r18
	DDRC |= (1<<SM2_3);
     4a8:	84 e3       	ldi	r24, 0x34	; 52
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	24 e3       	ldi	r18, 0x34	; 52
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	f9 01       	movw	r30, r18
     4b2:	20 81       	ld	r18, Z
     4b4:	24 60       	ori	r18, 0x04	; 4
     4b6:	fc 01       	movw	r30, r24
     4b8:	20 83       	st	Z, r18
	DDRC |= (1<<SM2_4);
     4ba:	84 e3       	ldi	r24, 0x34	; 52
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	24 e3       	ldi	r18, 0x34	; 52
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	f9 01       	movw	r30, r18
     4c4:	20 81       	ld	r18, Z
     4c6:	28 60       	ori	r18, 0x08	; 8
     4c8:	fc 01       	movw	r30, r24
     4ca:	20 83       	st	Z, r18


	//DDRX Input Conf
	DDRA |= (1<<Input1);
     4cc:	8a e3       	ldi	r24, 0x3A	; 58
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	2a e3       	ldi	r18, 0x3A	; 58
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	f9 01       	movw	r30, r18
     4d6:	20 81       	ld	r18, Z
     4d8:	21 60       	ori	r18, 0x01	; 1
     4da:	fc 01       	movw	r30, r24
     4dc:	20 83       	st	Z, r18
	DDRA |= (1<<Input2);
     4de:	8a e3       	ldi	r24, 0x3A	; 58
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	2a e3       	ldi	r18, 0x3A	; 58
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	f9 01       	movw	r30, r18
     4e8:	20 81       	ld	r18, Z
     4ea:	22 60       	ori	r18, 0x02	; 2
     4ec:	fc 01       	movw	r30, r24
     4ee:	20 83       	st	Z, r18
	DDRB |= (1<<Stop);
     4f0:	87 e3       	ldi	r24, 0x37	; 55
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	27 e3       	ldi	r18, 0x37	; 55
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	f9 01       	movw	r30, r18
     4fa:	20 81       	ld	r18, Z
     4fc:	21 60       	ori	r18, 0x01	; 1
     4fe:	fc 01       	movw	r30, r24
     500:	20 83       	st	Z, r18
	DDRB |= (1<<Start);
     502:	87 e3       	ldi	r24, 0x37	; 55
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	27 e3       	ldi	r18, 0x37	; 55
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	f9 01       	movw	r30, r18
     50c:	20 81       	ld	r18, Z
     50e:	22 60       	ori	r18, 0x02	; 2
     510:	fc 01       	movw	r30, r24
     512:	20 83       	st	Z, r18
	DDRE |= (1<<NotAus);
     514:	82 e2       	ldi	r24, 0x22	; 34
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	22 e2       	ldi	r18, 0x22	; 34
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	f9 01       	movw	r30, r18
     51e:	20 81       	ld	r18, Z
     520:	20 68       	ori	r18, 0x80	; 128
     522:	fc 01       	movw	r30, r24
     524:	20 83       	st	Z, r18
	DDRB |= (1<<DBG1);
     526:	87 e3       	ldi	r24, 0x37	; 55
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	27 e3       	ldi	r18, 0x37	; 55
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	f9 01       	movw	r30, r18
     530:	20 81       	ld	r18, Z
     532:	28 60       	ori	r18, 0x08	; 8
     534:	fc 01       	movw	r30, r24
     536:	20 83       	st	Z, r18

	//Pull Up
	PORTA |= (1<<Input1);
     538:	8b e3       	ldi	r24, 0x3B	; 59
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	2b e3       	ldi	r18, 0x3B	; 59
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	f9 01       	movw	r30, r18
     542:	20 81       	ld	r18, Z
     544:	21 60       	ori	r18, 0x01	; 1
     546:	fc 01       	movw	r30, r24
     548:	20 83       	st	Z, r18
	PORTA |= (1<<Input2);
     54a:	8b e3       	ldi	r24, 0x3B	; 59
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	2b e3       	ldi	r18, 0x3B	; 59
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	f9 01       	movw	r30, r18
     554:	20 81       	ld	r18, Z
     556:	22 60       	ori	r18, 0x02	; 2
     558:	fc 01       	movw	r30, r24
     55a:	20 83       	st	Z, r18
	PORTB |= (1<<Stop);
     55c:	88 e3       	ldi	r24, 0x38	; 56
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	28 e3       	ldi	r18, 0x38	; 56
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	f9 01       	movw	r30, r18
     566:	20 81       	ld	r18, Z
     568:	21 60       	ori	r18, 0x01	; 1
     56a:	fc 01       	movw	r30, r24
     56c:	20 83       	st	Z, r18
	PORTB |= (1<<Start);
     56e:	88 e3       	ldi	r24, 0x38	; 56
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	28 e3       	ldi	r18, 0x38	; 56
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	f9 01       	movw	r30, r18
     578:	20 81       	ld	r18, Z
     57a:	22 60       	ori	r18, 0x02	; 2
     57c:	fc 01       	movw	r30, r24
     57e:	20 83       	st	Z, r18
	PORTE |= (1<<NotAus);
     580:	83 e2       	ldi	r24, 0x23	; 35
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	23 e2       	ldi	r18, 0x23	; 35
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	f9 01       	movw	r30, r18
     58a:	20 81       	ld	r18, Z
     58c:	20 68       	ori	r18, 0x80	; 128
     58e:	fc 01       	movw	r30, r24
     590:	20 83       	st	Z, r18
	PORTB |= (1<<DBG1);
     592:	88 e3       	ldi	r24, 0x38	; 56
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	28 e3       	ldi	r18, 0x38	; 56
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	f9 01       	movw	r30, r18
     59c:	20 81       	ld	r18, Z
     59e:	28 60       	ori	r18, 0x08	; 8
     5a0:	fc 01       	movw	r30, r24
     5a2:	20 83       	st	Z, r18
}
     5a4:	00 00       	nop
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <Get_Input>:

uint8_t Get_Input(uint8_t *Port, uint8_t Pin)
{
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	61 97       	sbiw	r28, 0x11	; 17
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
     5c4:	98 8b       	std	Y+16, r25	; 0x10
     5c6:	8f 87       	std	Y+15, r24	; 0x0f
     5c8:	69 8b       	std	Y+17, r22	; 0x11
	if (*Port & (1<<Pin) <= 1)
     5ca:	8f 85       	ldd	r24, Y+15	; 0x0f
     5cc:	98 89       	ldd	r25, Y+16	; 0x10
     5ce:	fc 01       	movw	r30, r24
     5d0:	80 81       	ld	r24, Z
     5d2:	28 2f       	mov	r18, r24
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	89 89       	ldd	r24, Y+17	; 0x11
     5d8:	48 2f       	mov	r20, r24
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <Get_Input+0x36>
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	4a 95       	dec	r20
     5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <Get_Input+0x32>
     5ea:	41 e0       	ldi	r20, 0x01	; 1
     5ec:	02 97       	sbiw	r24, 0x02	; 2
     5ee:	0c f0       	brlt	.+2      	; 0x5f2 <Get_Input+0x42>
     5f0:	40 e0       	ldi	r20, 0x00	; 0
     5f2:	84 2f       	mov	r24, r20
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	82 23       	and	r24, r18
     5f8:	93 23       	and	r25, r19
     5fa:	89 2b       	or	r24, r25
     5fc:	09 f4       	brne	.+2      	; 0x600 <Get_Input+0x50>
     5fe:	90 c0       	rjmp	.+288    	; 0x720 <Get_Input+0x170>
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	a0 e2       	ldi	r26, 0x20	; 32
     606:	b1 e4       	ldi	r27, 0x41	; 65
     608:	89 83       	std	Y+1, r24	; 0x01
     60a:	9a 83       	std	Y+2, r25	; 0x02
     60c:	ab 83       	std	Y+3, r26	; 0x03
     60e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	4a e7       	ldi	r20, 0x7A	; 122
     616:	55 e4       	ldi	r21, 0x45	; 69
     618:	69 81       	ldd	r22, Y+1	; 0x01
     61a:	7a 81       	ldd	r23, Y+2	; 0x02
     61c:	8b 81       	ldd	r24, Y+3	; 0x03
     61e:	9c 81       	ldd	r25, Y+4	; 0x04
     620:	0e 94 d6 05 	call	0xbac	; 0xbac <__mulsf3>
     624:	dc 01       	movw	r26, r24
     626:	cb 01       	movw	r24, r22
     628:	8d 83       	std	Y+5, r24	; 0x05
     62a:	9e 83       	std	Y+6, r25	; 0x06
     62c:	af 83       	std	Y+7, r26	; 0x07
     62e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	40 e8       	ldi	r20, 0x80	; 128
     636:	5f e3       	ldi	r21, 0x3F	; 63
     638:	6d 81       	ldd	r22, Y+5	; 0x05
     63a:	7e 81       	ldd	r23, Y+6	; 0x06
     63c:	8f 81       	ldd	r24, Y+7	; 0x07
     63e:	98 85       	ldd	r25, Y+8	; 0x08
     640:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__cmpsf2>
     644:	88 23       	and	r24, r24
     646:	2c f4       	brge	.+10     	; 0x652 <Get_Input+0xa2>
		__ticks = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	9a 87       	std	Y+10, r25	; 0x0a
     64e:	89 87       	std	Y+9, r24	; 0x09
     650:	3f c0       	rjmp	.+126    	; 0x6d0 <Get_Input+0x120>
	else if (__tmp > 65535)
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	3f ef       	ldi	r19, 0xFF	; 255
     656:	4f e7       	ldi	r20, 0x7F	; 127
     658:	57 e4       	ldi	r21, 0x47	; 71
     65a:	6d 81       	ldd	r22, Y+5	; 0x05
     65c:	7e 81       	ldd	r23, Y+6	; 0x06
     65e:	8f 81       	ldd	r24, Y+7	; 0x07
     660:	98 85       	ldd	r25, Y+8	; 0x08
     662:	0e 94 d1 05 	call	0xba2	; 0xba2 <__gesf2>
     666:	18 16       	cp	r1, r24
     668:	4c f5       	brge	.+82     	; 0x6bc <Get_Input+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	40 e2       	ldi	r20, 0x20	; 32
     670:	51 e4       	ldi	r21, 0x41	; 65
     672:	69 81       	ldd	r22, Y+1	; 0x01
     674:	7a 81       	ldd	r23, Y+2	; 0x02
     676:	8b 81       	ldd	r24, Y+3	; 0x03
     678:	9c 81       	ldd	r25, Y+4	; 0x04
     67a:	0e 94 d6 05 	call	0xbac	; 0xbac <__mulsf3>
     67e:	dc 01       	movw	r26, r24
     680:	cb 01       	movw	r24, r22
     682:	bc 01       	movw	r22, r24
     684:	cd 01       	movw	r24, r26
     686:	0e 94 55 05 	call	0xaaa	; 0xaaa <__fixunssfsi>
     68a:	dc 01       	movw	r26, r24
     68c:	cb 01       	movw	r24, r22
     68e:	9a 87       	std	Y+10, r25	; 0x0a
     690:	89 87       	std	Y+9, r24	; 0x09
     692:	0f c0       	rjmp	.+30     	; 0x6b2 <Get_Input+0x102>
     694:	80 e9       	ldi	r24, 0x90	; 144
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	9c 87       	std	Y+12, r25	; 0x0c
     69a:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     69c:	8b 85       	ldd	r24, Y+11	; 0x0b
     69e:	9c 85       	ldd	r25, Y+12	; 0x0c
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	f1 f7       	brne	.-4      	; 0x6a0 <Get_Input+0xf0>
     6a4:	9c 87       	std	Y+12, r25	; 0x0c
     6a6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6a8:	89 85       	ldd	r24, Y+9	; 0x09
     6aa:	9a 85       	ldd	r25, Y+10	; 0x0a
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	9a 87       	std	Y+10, r25	; 0x0a
     6b0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6b2:	89 85       	ldd	r24, Y+9	; 0x09
     6b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     6b6:	89 2b       	or	r24, r25
     6b8:	69 f7       	brne	.-38     	; 0x694 <Get_Input+0xe4>
     6ba:	14 c0       	rjmp	.+40     	; 0x6e4 <Get_Input+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6bc:	6d 81       	ldd	r22, Y+5	; 0x05
     6be:	7e 81       	ldd	r23, Y+6	; 0x06
     6c0:	8f 81       	ldd	r24, Y+7	; 0x07
     6c2:	98 85       	ldd	r25, Y+8	; 0x08
     6c4:	0e 94 55 05 	call	0xaaa	; 0xaaa <__fixunssfsi>
     6c8:	dc 01       	movw	r26, r24
     6ca:	cb 01       	movw	r24, r22
     6cc:	9a 87       	std	Y+10, r25	; 0x0a
     6ce:	89 87       	std	Y+9, r24	; 0x09
     6d0:	89 85       	ldd	r24, Y+9	; 0x09
     6d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     6d4:	9e 87       	std	Y+14, r25	; 0x0e
     6d6:	8d 87       	std	Y+13, r24	; 0x0d
     6d8:	8d 85       	ldd	r24, Y+13	; 0x0d
     6da:	9e 85       	ldd	r25, Y+14	; 0x0e
     6dc:	01 97       	sbiw	r24, 0x01	; 1
     6de:	f1 f7       	brne	.-4      	; 0x6dc <Get_Input+0x12c>
     6e0:	9e 87       	std	Y+14, r25	; 0x0e
     6e2:	8d 87       	std	Y+13, r24	; 0x0d
	{
		_delay_ms(Debounce);

		if(*Port & (1<<Pin) <= 1)
     6e4:	8f 85       	ldd	r24, Y+15	; 0x0f
     6e6:	98 89       	ldd	r25, Y+16	; 0x10
     6e8:	fc 01       	movw	r30, r24
     6ea:	80 81       	ld	r24, Z
     6ec:	28 2f       	mov	r18, r24
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	89 89       	ldd	r24, Y+17	; 0x11
     6f2:	48 2f       	mov	r20, r24
     6f4:	50 e0       	ldi	r21, 0x00	; 0
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	02 c0       	rjmp	.+4      	; 0x700 <Get_Input+0x150>
     6fc:	88 0f       	add	r24, r24
     6fe:	99 1f       	adc	r25, r25
     700:	4a 95       	dec	r20
     702:	e2 f7       	brpl	.-8      	; 0x6fc <Get_Input+0x14c>
     704:	41 e0       	ldi	r20, 0x01	; 1
     706:	02 97       	sbiw	r24, 0x02	; 2
     708:	0c f0       	brlt	.+2      	; 0x70c <Get_Input+0x15c>
     70a:	40 e0       	ldi	r20, 0x00	; 0
     70c:	84 2f       	mov	r24, r20
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	82 23       	and	r24, r18
     712:	93 23       	and	r25, r19
     714:	89 2b       	or	r24, r25
     716:	11 f0       	breq	.+4      	; 0x71c <Get_Input+0x16c>
		{
			return OFF;
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	03 c0       	rjmp	.+6      	; 0x722 <Get_Input+0x172>
		}
		else
		{
			return ON;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	01 c0       	rjmp	.+2      	; 0x722 <Get_Input+0x172>
		}
	}
	else
	{
		return ON;
     720:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     722:	61 96       	adiw	r28, 0x11	; 17
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	f8 94       	cli
     728:	de bf       	out	0x3e, r29	; 62
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	cd bf       	out	0x3d, r28	; 61
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	08 95       	ret

00000734 <PWM_Generator>:

void PWM_Generator(PWM_Setting *PWM)
{
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	00 d0       	rcall	.+0      	; 0x73a <PWM_Generator+0x6>
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	9a 83       	std	Y+2, r25	; 0x02
     740:	89 83       	std	Y+1, r24	; 0x01
	volatile static uint8_t Counter = 0;
	if (Counter == 255) Counter == 0;
     742:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Counter.2080>
     746:	8f 3f       	cpi	r24, 0xFF	; 255
     748:	11 f4       	brne	.+4      	; 0x74e <PWM_Generator+0x1a>
     74a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Counter.2080>


	if (PWM->PWM_Enabel[PWM_Pumpe]   == 1 &&  PWM->PWM_List[PWM_Pumpe]   == 1 && PWM->PWM_Wert[PWM_Pumpe] == Counter)   _Pumpe(ON);
     74e:	89 81       	ldd	r24, Y+1	; 0x01
     750:	9a 81       	ldd	r25, Y+2	; 0x02
     752:	fc 01       	movw	r30, r24
     754:	82 85       	ldd	r24, Z+10	; 0x0a
     756:	81 30       	cpi	r24, 0x01	; 1
     758:	b9 f4       	brne	.+46     	; 0x788 <PWM_Generator+0x54>
     75a:	89 81       	ldd	r24, Y+1	; 0x01
     75c:	9a 81       	ldd	r25, Y+2	; 0x02
     75e:	fc 01       	movw	r30, r24
     760:	80 81       	ld	r24, Z
     762:	81 30       	cpi	r24, 0x01	; 1
     764:	89 f4       	brne	.+34     	; 0x788 <PWM_Generator+0x54>
     766:	89 81       	ldd	r24, Y+1	; 0x01
     768:	9a 81       	ldd	r25, Y+2	; 0x02
     76a:	fc 01       	movw	r30, r24
     76c:	94 89       	ldd	r25, Z+20	; 0x14
     76e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Counter.2080>
     772:	98 17       	cp	r25, r24
     774:	49 f4       	brne	.+18     	; 0x788 <PWM_Generator+0x54>
     776:	8b e3       	ldi	r24, 0x3B	; 59
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	2b e3       	ldi	r18, 0x3B	; 59
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	f9 01       	movw	r30, r18
     780:	20 81       	ld	r18, Z
     782:	28 60       	ori	r18, 0x08	; 8
     784:	fc 01       	movw	r30, r24
     786:	20 83       	st	Z, r18
	if (PWM->PWM_Enabel[PWM_Heizung] == 1 &&  PWM->PWM_List[PWM_Heizung] == 1 && PWM->PWM_Wert[PWM_Heizung] == Counter) _Heizung(ON);
     788:	89 81       	ldd	r24, Y+1	; 0x01
     78a:	9a 81       	ldd	r25, Y+2	; 0x02
     78c:	fc 01       	movw	r30, r24
     78e:	83 85       	ldd	r24, Z+11	; 0x0b
     790:	81 30       	cpi	r24, 0x01	; 1
     792:	b9 f4       	brne	.+46     	; 0x7c2 <PWM_Generator+0x8e>
     794:	89 81       	ldd	r24, Y+1	; 0x01
     796:	9a 81       	ldd	r25, Y+2	; 0x02
     798:	fc 01       	movw	r30, r24
     79a:	81 81       	ldd	r24, Z+1	; 0x01
     79c:	81 30       	cpi	r24, 0x01	; 1
     79e:	89 f4       	brne	.+34     	; 0x7c2 <PWM_Generator+0x8e>
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
     7a2:	9a 81       	ldd	r25, Y+2	; 0x02
     7a4:	fc 01       	movw	r30, r24
     7a6:	95 89       	ldd	r25, Z+21	; 0x15
     7a8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Counter.2080>
     7ac:	98 17       	cp	r25, r24
     7ae:	49 f4       	brne	.+18     	; 0x7c2 <PWM_Generator+0x8e>
     7b0:	8b e3       	ldi	r24, 0x3B	; 59
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	2b e3       	ldi	r18, 0x3B	; 59
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	f9 01       	movw	r30, r18
     7ba:	20 81       	ld	r18, Z
     7bc:	20 61       	ori	r18, 0x10	; 16
     7be:	fc 01       	movw	r30, r24
     7c0:	20 83       	st	Z, r18
	if (PWM->PWM_Enabel[PWM_Lufter1] == 1 &&  PWM->PWM_List[PWM_Lufter1] == 1 && PWM->PWM_Wert[PWM_Lufter1] == Counter) _Lufter1(ON)
     7c2:	89 81       	ldd	r24, Y+1	; 0x01
     7c4:	9a 81       	ldd	r25, Y+2	; 0x02
     7c6:	fc 01       	movw	r30, r24
     7c8:	84 85       	ldd	r24, Z+12	; 0x0c
     7ca:	81 30       	cpi	r24, 0x01	; 1
     7cc:	b9 f4       	brne	.+46     	; 0x7fc <PWM_Generator+0xc8>
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
     7d0:	9a 81       	ldd	r25, Y+2	; 0x02
     7d2:	fc 01       	movw	r30, r24
     7d4:	82 81       	ldd	r24, Z+2	; 0x02
     7d6:	81 30       	cpi	r24, 0x01	; 1
     7d8:	89 f4       	brne	.+34     	; 0x7fc <PWM_Generator+0xc8>
     7da:	89 81       	ldd	r24, Y+1	; 0x01
     7dc:	9a 81       	ldd	r25, Y+2	; 0x02
     7de:	fc 01       	movw	r30, r24
     7e0:	96 89       	ldd	r25, Z+22	; 0x16
     7e2:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Counter.2080>
     7e6:	98 17       	cp	r25, r24
     7e8:	49 f4       	brne	.+18     	; 0x7fc <PWM_Generator+0xc8>
     7ea:	8b e3       	ldi	r24, 0x3B	; 59
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	2b e3       	ldi	r18, 0x3B	; 59
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	f9 01       	movw	r30, r18
     7f4:	20 81       	ld	r18, Z
     7f6:	20 62       	ori	r18, 0x20	; 32
     7f8:	fc 01       	movw	r30, r24
     7fa:	20 83       	st	Z, r18
	if (PWM->PWM_Enabel[PWM_Lufter2] == 1 &&  PWM->PWM_List[PWM_Lufter2] == 1 && PWM->PWM_Wert[PWM_Lufter2] == Counter) _Lufter2(ON)
     7fc:	89 81       	ldd	r24, Y+1	; 0x01
     7fe:	9a 81       	ldd	r25, Y+2	; 0x02
     800:	fc 01       	movw	r30, r24
     802:	85 85       	ldd	r24, Z+13	; 0x0d
     804:	81 30       	cpi	r24, 0x01	; 1
     806:	b9 f4       	brne	.+46     	; 0x836 <PWM_Generator+0x102>
     808:	89 81       	ldd	r24, Y+1	; 0x01
     80a:	9a 81       	ldd	r25, Y+2	; 0x02
     80c:	fc 01       	movw	r30, r24
     80e:	83 81       	ldd	r24, Z+3	; 0x03
     810:	81 30       	cpi	r24, 0x01	; 1
     812:	89 f4       	brne	.+34     	; 0x836 <PWM_Generator+0x102>
     814:	89 81       	ldd	r24, Y+1	; 0x01
     816:	9a 81       	ldd	r25, Y+2	; 0x02
     818:	fc 01       	movw	r30, r24
     81a:	97 89       	ldd	r25, Z+23	; 0x17
     81c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Counter.2080>
     820:	98 17       	cp	r25, r24
     822:	49 f4       	brne	.+18     	; 0x836 <PWM_Generator+0x102>
     824:	8b e3       	ldi	r24, 0x3B	; 59
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	2b e3       	ldi	r18, 0x3B	; 59
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	f9 01       	movw	r30, r18
     82e:	20 81       	ld	r18, Z
     830:	20 64       	ori	r18, 0x40	; 64
     832:	fc 01       	movw	r30, r24
     834:	20 83       	st	Z, r18
	if (PWM->PWM_Enabel[PWM_Rot1]    == 1 &&  PWM->PWM_List[PWM_Rot1]    == 1 && PWM->PWM_Wert[PWM_Rot1] == Counter)    _Rot1(ON);
     836:	89 81       	ldd	r24, Y+1	; 0x01
     838:	9a 81       	ldd	r25, Y+2	; 0x02
     83a:	fc 01       	movw	r30, r24
     83c:	86 85       	ldd	r24, Z+14	; 0x0e
     83e:	81 30       	cpi	r24, 0x01	; 1
     840:	b9 f4       	brne	.+46     	; 0x870 <PWM_Generator+0x13c>
     842:	89 81       	ldd	r24, Y+1	; 0x01
     844:	9a 81       	ldd	r25, Y+2	; 0x02
     846:	fc 01       	movw	r30, r24
     848:	84 81       	ldd	r24, Z+4	; 0x04
     84a:	81 30       	cpi	r24, 0x01	; 1
     84c:	89 f4       	brne	.+34     	; 0x870 <PWM_Generator+0x13c>
     84e:	89 81       	ldd	r24, Y+1	; 0x01
     850:	9a 81       	ldd	r25, Y+2	; 0x02
     852:	fc 01       	movw	r30, r24
     854:	90 8d       	ldd	r25, Z+24	; 0x18
     856:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Counter.2080>
     85a:	98 17       	cp	r25, r24
     85c:	49 f4       	brne	.+18     	; 0x870 <PWM_Generator+0x13c>
     85e:	85 e3       	ldi	r24, 0x35	; 53
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	25 e3       	ldi	r18, 0x35	; 53
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	f9 01       	movw	r30, r18
     868:	20 81       	ld	r18, Z
     86a:	20 64       	ori	r18, 0x40	; 64
     86c:	fc 01       	movw	r30, r24
     86e:	20 83       	st	Z, r18
	if (PWM->PWM_Enabel[PWM_Grun1]   == 1 &&  PWM->PWM_List[PWM_Grun1]   == 1 && PWM->PWM_Wert[PWM_Grun1] == Counter)   _Grun1(ON);
     870:	89 81       	ldd	r24, Y+1	; 0x01
     872:	9a 81       	ldd	r25, Y+2	; 0x02
     874:	fc 01       	movw	r30, r24
     876:	87 85       	ldd	r24, Z+15	; 0x0f
     878:	81 30       	cpi	r24, 0x01	; 1
     87a:	b9 f4       	brne	.+46     	; 0x8aa <PWM_Generator+0x176>
     87c:	89 81       	ldd	r24, Y+1	; 0x01
     87e:	9a 81       	ldd	r25, Y+2	; 0x02
     880:	fc 01       	movw	r30, r24
     882:	85 81       	ldd	r24, Z+5	; 0x05
     884:	81 30       	cpi	r24, 0x01	; 1
     886:	89 f4       	brne	.+34     	; 0x8aa <PWM_Generator+0x176>
     888:	89 81       	ldd	r24, Y+1	; 0x01
     88a:	9a 81       	ldd	r25, Y+2	; 0x02
     88c:	fc 01       	movw	r30, r24
     88e:	91 8d       	ldd	r25, Z+25	; 0x19
     890:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Counter.2080>
     894:	98 17       	cp	r25, r24
     896:	49 f4       	brne	.+18     	; 0x8aa <PWM_Generator+0x176>
     898:	85 e3       	ldi	r24, 0x35	; 53
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	25 e3       	ldi	r18, 0x35	; 53
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	f9 01       	movw	r30, r18
     8a2:	20 81       	ld	r18, Z
     8a4:	20 62       	ori	r18, 0x20	; 32
     8a6:	fc 01       	movw	r30, r24
     8a8:	20 83       	st	Z, r18
	if (PWM->PWM_Enabel[PWM_Blau1]   == 1 &&  PWM->PWM_List[PWM_Blau1]   == 1 && PWM->PWM_Wert[PWM_Blau1] == Counter)   _Blau1(ON)
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	9a 81       	ldd	r25, Y+2	; 0x02
     8ae:	fc 01       	movw	r30, r24
     8b0:	80 89       	ldd	r24, Z+16	; 0x10
     8b2:	81 30       	cpi	r24, 0x01	; 1
     8b4:	b9 f4       	brne	.+46     	; 0x8e4 <PWM_Generator+0x1b0>
     8b6:	89 81       	ldd	r24, Y+1	; 0x01
     8b8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ba:	fc 01       	movw	r30, r24
     8bc:	86 81       	ldd	r24, Z+6	; 0x06
     8be:	81 30       	cpi	r24, 0x01	; 1
     8c0:	89 f4       	brne	.+34     	; 0x8e4 <PWM_Generator+0x1b0>
     8c2:	89 81       	ldd	r24, Y+1	; 0x01
     8c4:	9a 81       	ldd	r25, Y+2	; 0x02
     8c6:	fc 01       	movw	r30, r24
     8c8:	92 8d       	ldd	r25, Z+26	; 0x1a
     8ca:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Counter.2080>
     8ce:	98 17       	cp	r25, r24
     8d0:	49 f4       	brne	.+18     	; 0x8e4 <PWM_Generator+0x1b0>
     8d2:	85 e3       	ldi	r24, 0x35	; 53
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	25 e3       	ldi	r18, 0x35	; 53
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	f9 01       	movw	r30, r18
     8dc:	20 81       	ld	r18, Z
     8de:	20 61       	ori	r18, 0x10	; 16
     8e0:	fc 01       	movw	r30, r24
     8e2:	20 83       	st	Z, r18
	if (PWM->PWM_Enabel[PWM_Rot2]    == 1 &&  PWM->PWM_List[PWM_Rot2]    == 1 && PWM->PWM_Wert[PWM_Rot2] == Counter)    _Rot2(ON);
     8e4:	89 81       	ldd	r24, Y+1	; 0x01
     8e6:	9a 81       	ldd	r25, Y+2	; 0x02
     8e8:	fc 01       	movw	r30, r24
     8ea:	81 89       	ldd	r24, Z+17	; 0x11
     8ec:	81 30       	cpi	r24, 0x01	; 1
     8ee:	b9 f4       	brne	.+46     	; 0x91e <PWM_Generator+0x1ea>
     8f0:	89 81       	ldd	r24, Y+1	; 0x01
     8f2:	9a 81       	ldd	r25, Y+2	; 0x02
     8f4:	fc 01       	movw	r30, r24
     8f6:	87 81       	ldd	r24, Z+7	; 0x07
     8f8:	81 30       	cpi	r24, 0x01	; 1
     8fa:	89 f4       	brne	.+34     	; 0x91e <PWM_Generator+0x1ea>
     8fc:	89 81       	ldd	r24, Y+1	; 0x01
     8fe:	9a 81       	ldd	r25, Y+2	; 0x02
     900:	fc 01       	movw	r30, r24
     902:	93 8d       	ldd	r25, Z+27	; 0x1b
     904:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Counter.2080>
     908:	98 17       	cp	r25, r24
     90a:	49 f4       	brne	.+18     	; 0x91e <PWM_Generator+0x1ea>
     90c:	8b e3       	ldi	r24, 0x3B	; 59
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	2b e3       	ldi	r18, 0x3B	; 59
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	f9 01       	movw	r30, r18
     916:	20 81       	ld	r18, Z
     918:	20 68       	ori	r18, 0x80	; 128
     91a:	fc 01       	movw	r30, r24
     91c:	20 83       	st	Z, r18
	if (PWM->PWM_Enabel[PWM_Grun2]   == 1 &&  PWM->PWM_List[PWM_Grun2]   == 1 && PWM->PWM_Wert[PWM_Grun2] == Counter)   _Grun2(ON);
     91e:	89 81       	ldd	r24, Y+1	; 0x01
     920:	9a 81       	ldd	r25, Y+2	; 0x02
     922:	fc 01       	movw	r30, r24
     924:	82 89       	ldd	r24, Z+18	; 0x12
     926:	81 30       	cpi	r24, 0x01	; 1
     928:	b9 f4       	brne	.+46     	; 0x958 <PWM_Generator+0x224>
     92a:	89 81       	ldd	r24, Y+1	; 0x01
     92c:	9a 81       	ldd	r25, Y+2	; 0x02
     92e:	fc 01       	movw	r30, r24
     930:	80 85       	ldd	r24, Z+8	; 0x08
     932:	81 30       	cpi	r24, 0x01	; 1
     934:	89 f4       	brne	.+34     	; 0x958 <PWM_Generator+0x224>
     936:	89 81       	ldd	r24, Y+1	; 0x01
     938:	9a 81       	ldd	r25, Y+2	; 0x02
     93a:	fc 01       	movw	r30, r24
     93c:	94 8d       	ldd	r25, Z+28	; 0x1c
     93e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Counter.2080>
     942:	98 17       	cp	r25, r24
     944:	49 f4       	brne	.+18     	; 0x958 <PWM_Generator+0x224>
     946:	85 e6       	ldi	r24, 0x65	; 101
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	25 e6       	ldi	r18, 0x65	; 101
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	f9 01       	movw	r30, r18
     950:	20 81       	ld	r18, Z
     952:	24 60       	ori	r18, 0x04	; 4
     954:	fc 01       	movw	r30, r24
     956:	20 83       	st	Z, r18
	if (PWM->PWM_Enabel[PWM_Blau2]   == 1 &&  PWM->PWM_List[PWM_Blau2]   == 1 && PWM->PWM_Wert[PWM_Blau2] == Counter)   _Blau2(ON);
     958:	89 81       	ldd	r24, Y+1	; 0x01
     95a:	9a 81       	ldd	r25, Y+2	; 0x02
     95c:	fc 01       	movw	r30, r24
     95e:	83 89       	ldd	r24, Z+19	; 0x13
     960:	81 30       	cpi	r24, 0x01	; 1
     962:	b9 f4       	brne	.+46     	; 0x992 <PWM_Generator+0x25e>
     964:	89 81       	ldd	r24, Y+1	; 0x01
     966:	9a 81       	ldd	r25, Y+2	; 0x02
     968:	fc 01       	movw	r30, r24
     96a:	81 85       	ldd	r24, Z+9	; 0x09
     96c:	81 30       	cpi	r24, 0x01	; 1
     96e:	89 f4       	brne	.+34     	; 0x992 <PWM_Generator+0x25e>
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	9a 81       	ldd	r25, Y+2	; 0x02
     974:	fc 01       	movw	r30, r24
     976:	95 8d       	ldd	r25, Z+29	; 0x1d
     978:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Counter.2080>
     97c:	98 17       	cp	r25, r24
     97e:	49 f4       	brne	.+18     	; 0x992 <PWM_Generator+0x25e>
     980:	85 e3       	ldi	r24, 0x35	; 53
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	25 e3       	ldi	r18, 0x35	; 53
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	f9 01       	movw	r30, r18
     98a:	20 81       	ld	r18, Z
     98c:	20 68       	ori	r18, 0x80	; 128
     98e:	fc 01       	movw	r30, r24
     990:	20 83       	st	Z, r18

	if (Counter == 254)
     992:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Counter.2080>
     996:	8e 3f       	cpi	r24, 0xFE	; 254
     998:	09 f0       	breq	.+2      	; 0x99c <PWM_Generator+0x268>
     99a:	5a c0       	rjmp	.+180    	; 0xa50 <PWM_Generator+0x31c>
	{
		_Pumpe(OFF);
     99c:	8b e3       	ldi	r24, 0x3B	; 59
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	2b e3       	ldi	r18, 0x3B	; 59
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	f9 01       	movw	r30, r18
     9a6:	20 81       	ld	r18, Z
     9a8:	27 7f       	andi	r18, 0xF7	; 247
     9aa:	fc 01       	movw	r30, r24
     9ac:	20 83       	st	Z, r18
		_Heizung(OFF);
     9ae:	8b e3       	ldi	r24, 0x3B	; 59
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	2b e3       	ldi	r18, 0x3B	; 59
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	f9 01       	movw	r30, r18
     9b8:	20 81       	ld	r18, Z
     9ba:	2f 7e       	andi	r18, 0xEF	; 239
     9bc:	fc 01       	movw	r30, r24
     9be:	20 83       	st	Z, r18
		_Lufter1(OFF);
     9c0:	8b e3       	ldi	r24, 0x3B	; 59
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	2b e3       	ldi	r18, 0x3B	; 59
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	f9 01       	movw	r30, r18
     9ca:	20 81       	ld	r18, Z
     9cc:	2f 7d       	andi	r18, 0xDF	; 223
     9ce:	fc 01       	movw	r30, r24
     9d0:	20 83       	st	Z, r18
		_Lufter2(OFF);
     9d2:	8b e3       	ldi	r24, 0x3B	; 59
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	2b e3       	ldi	r18, 0x3B	; 59
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	f9 01       	movw	r30, r18
     9dc:	20 81       	ld	r18, Z
     9de:	2f 7b       	andi	r18, 0xBF	; 191
     9e0:	fc 01       	movw	r30, r24
     9e2:	20 83       	st	Z, r18
		_Rot1(OFF);
     9e4:	85 e3       	ldi	r24, 0x35	; 53
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	25 e3       	ldi	r18, 0x35	; 53
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	f9 01       	movw	r30, r18
     9ee:	20 81       	ld	r18, Z
     9f0:	2f 7b       	andi	r18, 0xBF	; 191
     9f2:	fc 01       	movw	r30, r24
     9f4:	20 83       	st	Z, r18
		_Grun1(OFF);
     9f6:	85 e3       	ldi	r24, 0x35	; 53
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	25 e3       	ldi	r18, 0x35	; 53
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	f9 01       	movw	r30, r18
     a00:	20 81       	ld	r18, Z
     a02:	2f 7d       	andi	r18, 0xDF	; 223
     a04:	fc 01       	movw	r30, r24
     a06:	20 83       	st	Z, r18
		_Blau1(OFF);
     a08:	85 e3       	ldi	r24, 0x35	; 53
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	25 e3       	ldi	r18, 0x35	; 53
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	f9 01       	movw	r30, r18
     a12:	20 81       	ld	r18, Z
     a14:	2f 7e       	andi	r18, 0xEF	; 239
     a16:	fc 01       	movw	r30, r24
     a18:	20 83       	st	Z, r18
		_Rot2(OFF);
     a1a:	8b e3       	ldi	r24, 0x3B	; 59
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	2b e3       	ldi	r18, 0x3B	; 59
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	f9 01       	movw	r30, r18
     a24:	20 81       	ld	r18, Z
     a26:	2f 77       	andi	r18, 0x7F	; 127
     a28:	fc 01       	movw	r30, r24
     a2a:	20 83       	st	Z, r18
		_Grun2(OFF);
     a2c:	8b e3       	ldi	r24, 0x3B	; 59
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	2b e3       	ldi	r18, 0x3B	; 59
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	f9 01       	movw	r30, r18
     a36:	20 81       	ld	r18, Z
     a38:	2b 7f       	andi	r18, 0xFB	; 251
     a3a:	fc 01       	movw	r30, r24
     a3c:	20 83       	st	Z, r18
		_Blau2(OFF);
     a3e:	8b e3       	ldi	r24, 0x3B	; 59
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	2b e3       	ldi	r18, 0x3B	; 59
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	f9 01       	movw	r30, r18
     a48:	20 81       	ld	r18, Z
     a4a:	2f 77       	andi	r18, 0x7F	; 127
     a4c:	fc 01       	movw	r30, r24
     a4e:	20 83       	st	Z, r18
	}

	Counter++;
     a50:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Counter.2080>
     a54:	8f 5f       	subi	r24, 0xFF	; 255
     a56:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <Counter.2080>
}
     a5a:	00 00       	nop
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	08 95       	ret

00000a66 <main>:
#include "UART/UART_Routine.h"
#include "IO/IO.h"


int main (void)
{
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	1f 92       	push	r1
     a6c:	cd b7       	in	r28, 0x3d	; 61
     a6e:	de b7       	in	r29, 0x3e	; 62
	Init_GPIO(&PWM);
     a70:	86 ec       	ldi	r24, 0xC6	; 198
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	0e 94 a2 01 	call	0x344	; 0x344 <Init_GPIO>
    UART_Init(&UART0);
     a78:	89 e3       	ldi	r24, 0x39	; 57
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	0e 94 65 00 	call	0xca	; 0xca <UART_Init>


    while(1)
    {

    	uint8_t i = Get_Input(&Input1_Port, Input1);
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	89 e3       	ldi	r24, 0x39	; 57
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <Get_Input>
     a8c:	89 83       	std	Y+1, r24	; 0x01

		UART_RX_Handler(&UART0);
     a8e:	89 e3       	ldi	r24, 0x39	; 57
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	0e 94 0d 01 	call	0x21a	; 0x21a <UART_RX_Handler>
		RX_Taskhandler(&UART0);
     a96:	89 e3       	ldi	r24, 0x39	; 57
     a98:	91 e0       	ldi	r25, 0x01	; 1
     a9a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <RX_Taskhandler>
    }
     a9e:	f0 cf       	rjmp	.-32     	; 0xa80 <main+0x1a>

00000aa0 <__cmpsf2>:
     aa0:	0e 94 84 05 	call	0xb08	; 0xb08 <__fp_cmp>
     aa4:	08 f4       	brcc	.+2      	; 0xaa8 <__cmpsf2+0x8>
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	08 95       	ret

00000aaa <__fixunssfsi>:
     aaa:	0e 94 b0 05 	call	0xb60	; 0xb60 <__fp_splitA>
     aae:	88 f0       	brcs	.+34     	; 0xad2 <__fixunssfsi+0x28>
     ab0:	9f 57       	subi	r25, 0x7F	; 127
     ab2:	98 f0       	brcs	.+38     	; 0xada <__fixunssfsi+0x30>
     ab4:	b9 2f       	mov	r27, r25
     ab6:	99 27       	eor	r25, r25
     ab8:	b7 51       	subi	r27, 0x17	; 23
     aba:	b0 f0       	brcs	.+44     	; 0xae8 <__fixunssfsi+0x3e>
     abc:	e1 f0       	breq	.+56     	; 0xaf6 <__fixunssfsi+0x4c>
     abe:	66 0f       	add	r22, r22
     ac0:	77 1f       	adc	r23, r23
     ac2:	88 1f       	adc	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	1a f0       	brmi	.+6      	; 0xace <__fixunssfsi+0x24>
     ac8:	ba 95       	dec	r27
     aca:	c9 f7       	brne	.-14     	; 0xabe <__fixunssfsi+0x14>
     acc:	14 c0       	rjmp	.+40     	; 0xaf6 <__fixunssfsi+0x4c>
     ace:	b1 30       	cpi	r27, 0x01	; 1
     ad0:	91 f0       	breq	.+36     	; 0xaf6 <__fixunssfsi+0x4c>
     ad2:	0e 94 ca 05 	call	0xb94	; 0xb94 <__fp_zero>
     ad6:	b1 e0       	ldi	r27, 0x01	; 1
     ad8:	08 95       	ret
     ada:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <__fp_zero>
     ade:	67 2f       	mov	r22, r23
     ae0:	78 2f       	mov	r23, r24
     ae2:	88 27       	eor	r24, r24
     ae4:	b8 5f       	subi	r27, 0xF8	; 248
     ae6:	39 f0       	breq	.+14     	; 0xaf6 <__fixunssfsi+0x4c>
     ae8:	b9 3f       	cpi	r27, 0xF9	; 249
     aea:	cc f3       	brlt	.-14     	; 0xade <__fixunssfsi+0x34>
     aec:	86 95       	lsr	r24
     aee:	77 95       	ror	r23
     af0:	67 95       	ror	r22
     af2:	b3 95       	inc	r27
     af4:	d9 f7       	brne	.-10     	; 0xaec <__fixunssfsi+0x42>
     af6:	3e f4       	brtc	.+14     	; 0xb06 <__fixunssfsi+0x5c>
     af8:	90 95       	com	r25
     afa:	80 95       	com	r24
     afc:	70 95       	com	r23
     afe:	61 95       	neg	r22
     b00:	7f 4f       	sbci	r23, 0xFF	; 255
     b02:	8f 4f       	sbci	r24, 0xFF	; 255
     b04:	9f 4f       	sbci	r25, 0xFF	; 255
     b06:	08 95       	ret

00000b08 <__fp_cmp>:
     b08:	99 0f       	add	r25, r25
     b0a:	00 08       	sbc	r0, r0
     b0c:	55 0f       	add	r21, r21
     b0e:	aa 0b       	sbc	r26, r26
     b10:	e0 e8       	ldi	r30, 0x80	; 128
     b12:	fe ef       	ldi	r31, 0xFE	; 254
     b14:	16 16       	cp	r1, r22
     b16:	17 06       	cpc	r1, r23
     b18:	e8 07       	cpc	r30, r24
     b1a:	f9 07       	cpc	r31, r25
     b1c:	c0 f0       	brcs	.+48     	; 0xb4e <__fp_cmp+0x46>
     b1e:	12 16       	cp	r1, r18
     b20:	13 06       	cpc	r1, r19
     b22:	e4 07       	cpc	r30, r20
     b24:	f5 07       	cpc	r31, r21
     b26:	98 f0       	brcs	.+38     	; 0xb4e <__fp_cmp+0x46>
     b28:	62 1b       	sub	r22, r18
     b2a:	73 0b       	sbc	r23, r19
     b2c:	84 0b       	sbc	r24, r20
     b2e:	95 0b       	sbc	r25, r21
     b30:	39 f4       	brne	.+14     	; 0xb40 <__fp_cmp+0x38>
     b32:	0a 26       	eor	r0, r26
     b34:	61 f0       	breq	.+24     	; 0xb4e <__fp_cmp+0x46>
     b36:	23 2b       	or	r18, r19
     b38:	24 2b       	or	r18, r20
     b3a:	25 2b       	or	r18, r21
     b3c:	21 f4       	brne	.+8      	; 0xb46 <__fp_cmp+0x3e>
     b3e:	08 95       	ret
     b40:	0a 26       	eor	r0, r26
     b42:	09 f4       	brne	.+2      	; 0xb46 <__fp_cmp+0x3e>
     b44:	a1 40       	sbci	r26, 0x01	; 1
     b46:	a6 95       	lsr	r26
     b48:	8f ef       	ldi	r24, 0xFF	; 255
     b4a:	81 1d       	adc	r24, r1
     b4c:	81 1d       	adc	r24, r1
     b4e:	08 95       	ret

00000b50 <__fp_split3>:
     b50:	57 fd       	sbrc	r21, 7
     b52:	90 58       	subi	r25, 0x80	; 128
     b54:	44 0f       	add	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	59 f0       	breq	.+22     	; 0xb70 <__fp_splitA+0x10>
     b5a:	5f 3f       	cpi	r21, 0xFF	; 255
     b5c:	71 f0       	breq	.+28     	; 0xb7a <__fp_splitA+0x1a>
     b5e:	47 95       	ror	r20

00000b60 <__fp_splitA>:
     b60:	88 0f       	add	r24, r24
     b62:	97 fb       	bst	r25, 7
     b64:	99 1f       	adc	r25, r25
     b66:	61 f0       	breq	.+24     	; 0xb80 <__fp_splitA+0x20>
     b68:	9f 3f       	cpi	r25, 0xFF	; 255
     b6a:	79 f0       	breq	.+30     	; 0xb8a <__fp_splitA+0x2a>
     b6c:	87 95       	ror	r24
     b6e:	08 95       	ret
     b70:	12 16       	cp	r1, r18
     b72:	13 06       	cpc	r1, r19
     b74:	14 06       	cpc	r1, r20
     b76:	55 1f       	adc	r21, r21
     b78:	f2 cf       	rjmp	.-28     	; 0xb5e <__fp_split3+0xe>
     b7a:	46 95       	lsr	r20
     b7c:	f1 df       	rcall	.-30     	; 0xb60 <__fp_splitA>
     b7e:	08 c0       	rjmp	.+16     	; 0xb90 <__fp_splitA+0x30>
     b80:	16 16       	cp	r1, r22
     b82:	17 06       	cpc	r1, r23
     b84:	18 06       	cpc	r1, r24
     b86:	99 1f       	adc	r25, r25
     b88:	f1 cf       	rjmp	.-30     	; 0xb6c <__fp_splitA+0xc>
     b8a:	86 95       	lsr	r24
     b8c:	71 05       	cpc	r23, r1
     b8e:	61 05       	cpc	r22, r1
     b90:	08 94       	sec
     b92:	08 95       	ret

00000b94 <__fp_zero>:
     b94:	e8 94       	clt

00000b96 <__fp_szero>:
     b96:	bb 27       	eor	r27, r27
     b98:	66 27       	eor	r22, r22
     b9a:	77 27       	eor	r23, r23
     b9c:	cb 01       	movw	r24, r22
     b9e:	97 f9       	bld	r25, 7
     ba0:	08 95       	ret

00000ba2 <__gesf2>:
     ba2:	0e 94 84 05 	call	0xb08	; 0xb08 <__fp_cmp>
     ba6:	08 f4       	brcc	.+2      	; 0xbaa <__gesf2+0x8>
     ba8:	8f ef       	ldi	r24, 0xFF	; 255
     baa:	08 95       	ret

00000bac <__mulsf3>:
     bac:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__mulsf3x>
     bb0:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_round>
     bb4:	0e 94 4c 06 	call	0xc98	; 0xc98 <__fp_pscA>
     bb8:	38 f0       	brcs	.+14     	; 0xbc8 <__mulsf3+0x1c>
     bba:	0e 94 53 06 	call	0xca6	; 0xca6 <__fp_pscB>
     bbe:	20 f0       	brcs	.+8      	; 0xbc8 <__mulsf3+0x1c>
     bc0:	95 23       	and	r25, r21
     bc2:	11 f0       	breq	.+4      	; 0xbc8 <__mulsf3+0x1c>
     bc4:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__fp_inf>
     bc8:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__fp_nan>
     bcc:	11 24       	eor	r1, r1
     bce:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__fp_szero>

00000bd2 <__mulsf3x>:
     bd2:	0e 94 a8 05 	call	0xb50	; 0xb50 <__fp_split3>
     bd6:	70 f3       	brcs	.-36     	; 0xbb4 <__mulsf3+0x8>

00000bd8 <__mulsf3_pse>:
     bd8:	95 9f       	mul	r25, r21
     bda:	c1 f3       	breq	.-16     	; 0xbcc <__mulsf3+0x20>
     bdc:	95 0f       	add	r25, r21
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	55 1f       	adc	r21, r21
     be2:	62 9f       	mul	r22, r18
     be4:	f0 01       	movw	r30, r0
     be6:	72 9f       	mul	r23, r18
     be8:	bb 27       	eor	r27, r27
     bea:	f0 0d       	add	r31, r0
     bec:	b1 1d       	adc	r27, r1
     bee:	63 9f       	mul	r22, r19
     bf0:	aa 27       	eor	r26, r26
     bf2:	f0 0d       	add	r31, r0
     bf4:	b1 1d       	adc	r27, r1
     bf6:	aa 1f       	adc	r26, r26
     bf8:	64 9f       	mul	r22, r20
     bfa:	66 27       	eor	r22, r22
     bfc:	b0 0d       	add	r27, r0
     bfe:	a1 1d       	adc	r26, r1
     c00:	66 1f       	adc	r22, r22
     c02:	82 9f       	mul	r24, r18
     c04:	22 27       	eor	r18, r18
     c06:	b0 0d       	add	r27, r0
     c08:	a1 1d       	adc	r26, r1
     c0a:	62 1f       	adc	r22, r18
     c0c:	73 9f       	mul	r23, r19
     c0e:	b0 0d       	add	r27, r0
     c10:	a1 1d       	adc	r26, r1
     c12:	62 1f       	adc	r22, r18
     c14:	83 9f       	mul	r24, r19
     c16:	a0 0d       	add	r26, r0
     c18:	61 1d       	adc	r22, r1
     c1a:	22 1f       	adc	r18, r18
     c1c:	74 9f       	mul	r23, r20
     c1e:	33 27       	eor	r19, r19
     c20:	a0 0d       	add	r26, r0
     c22:	61 1d       	adc	r22, r1
     c24:	23 1f       	adc	r18, r19
     c26:	84 9f       	mul	r24, r20
     c28:	60 0d       	add	r22, r0
     c2a:	21 1d       	adc	r18, r1
     c2c:	82 2f       	mov	r24, r18
     c2e:	76 2f       	mov	r23, r22
     c30:	6a 2f       	mov	r22, r26
     c32:	11 24       	eor	r1, r1
     c34:	9f 57       	subi	r25, 0x7F	; 127
     c36:	50 40       	sbci	r21, 0x00	; 0
     c38:	9a f0       	brmi	.+38     	; 0xc60 <__mulsf3_pse+0x88>
     c3a:	f1 f0       	breq	.+60     	; 0xc78 <__mulsf3_pse+0xa0>
     c3c:	88 23       	and	r24, r24
     c3e:	4a f0       	brmi	.+18     	; 0xc52 <__mulsf3_pse+0x7a>
     c40:	ee 0f       	add	r30, r30
     c42:	ff 1f       	adc	r31, r31
     c44:	bb 1f       	adc	r27, r27
     c46:	66 1f       	adc	r22, r22
     c48:	77 1f       	adc	r23, r23
     c4a:	88 1f       	adc	r24, r24
     c4c:	91 50       	subi	r25, 0x01	; 1
     c4e:	50 40       	sbci	r21, 0x00	; 0
     c50:	a9 f7       	brne	.-22     	; 0xc3c <__mulsf3_pse+0x64>
     c52:	9e 3f       	cpi	r25, 0xFE	; 254
     c54:	51 05       	cpc	r21, r1
     c56:	80 f0       	brcs	.+32     	; 0xc78 <__mulsf3_pse+0xa0>
     c58:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__fp_inf>
     c5c:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__fp_szero>
     c60:	5f 3f       	cpi	r21, 0xFF	; 255
     c62:	e4 f3       	brlt	.-8      	; 0xc5c <__mulsf3_pse+0x84>
     c64:	98 3e       	cpi	r25, 0xE8	; 232
     c66:	d4 f3       	brlt	.-12     	; 0xc5c <__mulsf3_pse+0x84>
     c68:	86 95       	lsr	r24
     c6a:	77 95       	ror	r23
     c6c:	67 95       	ror	r22
     c6e:	b7 95       	ror	r27
     c70:	f7 95       	ror	r31
     c72:	e7 95       	ror	r30
     c74:	9f 5f       	subi	r25, 0xFF	; 255
     c76:	c1 f7       	brne	.-16     	; 0xc68 <__mulsf3_pse+0x90>
     c78:	fe 2b       	or	r31, r30
     c7a:	88 0f       	add	r24, r24
     c7c:	91 1d       	adc	r25, r1
     c7e:	96 95       	lsr	r25
     c80:	87 95       	ror	r24
     c82:	97 f9       	bld	r25, 7
     c84:	08 95       	ret

00000c86 <__fp_inf>:
     c86:	97 f9       	bld	r25, 7
     c88:	9f 67       	ori	r25, 0x7F	; 127
     c8a:	80 e8       	ldi	r24, 0x80	; 128
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	08 95       	ret

00000c92 <__fp_nan>:
     c92:	9f ef       	ldi	r25, 0xFF	; 255
     c94:	80 ec       	ldi	r24, 0xC0	; 192
     c96:	08 95       	ret

00000c98 <__fp_pscA>:
     c98:	00 24       	eor	r0, r0
     c9a:	0a 94       	dec	r0
     c9c:	16 16       	cp	r1, r22
     c9e:	17 06       	cpc	r1, r23
     ca0:	18 06       	cpc	r1, r24
     ca2:	09 06       	cpc	r0, r25
     ca4:	08 95       	ret

00000ca6 <__fp_pscB>:
     ca6:	00 24       	eor	r0, r0
     ca8:	0a 94       	dec	r0
     caa:	12 16       	cp	r1, r18
     cac:	13 06       	cpc	r1, r19
     cae:	14 06       	cpc	r1, r20
     cb0:	05 06       	cpc	r0, r21
     cb2:	08 95       	ret

00000cb4 <__fp_round>:
     cb4:	09 2e       	mov	r0, r25
     cb6:	03 94       	inc	r0
     cb8:	00 0c       	add	r0, r0
     cba:	11 f4       	brne	.+4      	; 0xcc0 <__fp_round+0xc>
     cbc:	88 23       	and	r24, r24
     cbe:	52 f0       	brmi	.+20     	; 0xcd4 <__fp_round+0x20>
     cc0:	bb 0f       	add	r27, r27
     cc2:	40 f4       	brcc	.+16     	; 0xcd4 <__fp_round+0x20>
     cc4:	bf 2b       	or	r27, r31
     cc6:	11 f4       	brne	.+4      	; 0xccc <__fp_round+0x18>
     cc8:	60 ff       	sbrs	r22, 0
     cca:	04 c0       	rjmp	.+8      	; 0xcd4 <__fp_round+0x20>
     ccc:	6f 5f       	subi	r22, 0xFF	; 255
     cce:	7f 4f       	sbci	r23, 0xFF	; 255
     cd0:	8f 4f       	sbci	r24, 0xFF	; 255
     cd2:	9f 4f       	sbci	r25, 0xFF	; 255
     cd4:	08 95       	ret

00000cd6 <strncmp>:
     cd6:	fb 01       	movw	r30, r22
     cd8:	dc 01       	movw	r26, r24
     cda:	41 50       	subi	r20, 0x01	; 1
     cdc:	50 40       	sbci	r21, 0x00	; 0
     cde:	30 f0       	brcs	.+12     	; 0xcec <strncmp+0x16>
     ce0:	8d 91       	ld	r24, X+
     ce2:	01 90       	ld	r0, Z+
     ce4:	80 19       	sub	r24, r0
     ce6:	19 f4       	brne	.+6      	; 0xcee <strncmp+0x18>
     ce8:	00 20       	and	r0, r0
     cea:	b9 f7       	brne	.-18     	; 0xcda <strncmp+0x4>
     cec:	88 1b       	sub	r24, r24
     cee:	99 0b       	sbc	r25, r25
     cf0:	08 95       	ret

00000cf2 <printf>:
     cf2:	a0 e0       	ldi	r26, 0x00	; 0
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	ef e7       	ldi	r30, 0x7F	; 127
     cf8:	f6 e0       	ldi	r31, 0x06	; 6
     cfa:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__prologue_saves__+0x20>
     cfe:	ae 01       	movw	r20, r28
     d00:	4b 5f       	subi	r20, 0xFB	; 251
     d02:	5f 4f       	sbci	r21, 0xFF	; 255
     d04:	fa 01       	movw	r30, r20
     d06:	61 91       	ld	r22, Z+
     d08:	71 91       	ld	r23, Z+
     d0a:	af 01       	movw	r20, r30
     d0c:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <__iob+0x2>
     d10:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <__iob+0x3>
     d14:	0e 94 8f 06 	call	0xd1e	; 0xd1e <vfprintf>
     d18:	e2 e0       	ldi	r30, 0x02	; 2
     d1a:	0c 94 4c 09 	jmp	0x1298	; 0x1298 <__epilogue_restores__+0x20>

00000d1e <vfprintf>:
     d1e:	ab e0       	ldi	r26, 0x0B	; 11
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e5 e9       	ldi	r30, 0x95	; 149
     d24:	f6 e0       	ldi	r31, 0x06	; 6
     d26:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__prologue_saves__>
     d2a:	6c 01       	movw	r12, r24
     d2c:	7b 01       	movw	r14, r22
     d2e:	8a 01       	movw	r16, r20
     d30:	fc 01       	movw	r30, r24
     d32:	17 82       	std	Z+7, r1	; 0x07
     d34:	16 82       	std	Z+6, r1	; 0x06
     d36:	83 81       	ldd	r24, Z+3	; 0x03
     d38:	81 ff       	sbrs	r24, 1
     d3a:	cc c1       	rjmp	.+920    	; 0x10d4 <vfprintf+0x3b6>
     d3c:	ce 01       	movw	r24, r28
     d3e:	01 96       	adiw	r24, 0x01	; 1
     d40:	3c 01       	movw	r6, r24
     d42:	f6 01       	movw	r30, r12
     d44:	93 81       	ldd	r25, Z+3	; 0x03
     d46:	f7 01       	movw	r30, r14
     d48:	93 fd       	sbrc	r25, 3
     d4a:	85 91       	lpm	r24, Z+
     d4c:	93 ff       	sbrs	r25, 3
     d4e:	81 91       	ld	r24, Z+
     d50:	7f 01       	movw	r14, r30
     d52:	88 23       	and	r24, r24
     d54:	09 f4       	brne	.+2      	; 0xd58 <vfprintf+0x3a>
     d56:	ba c1       	rjmp	.+884    	; 0x10cc <vfprintf+0x3ae>
     d58:	85 32       	cpi	r24, 0x25	; 37
     d5a:	39 f4       	brne	.+14     	; 0xd6a <vfprintf+0x4c>
     d5c:	93 fd       	sbrc	r25, 3
     d5e:	85 91       	lpm	r24, Z+
     d60:	93 ff       	sbrs	r25, 3
     d62:	81 91       	ld	r24, Z+
     d64:	7f 01       	movw	r14, r30
     d66:	85 32       	cpi	r24, 0x25	; 37
     d68:	29 f4       	brne	.+10     	; 0xd74 <vfprintf+0x56>
     d6a:	b6 01       	movw	r22, r12
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 86 08 	call	0x110c	; 0x110c <fputc>
     d72:	e7 cf       	rjmp	.-50     	; 0xd42 <vfprintf+0x24>
     d74:	91 2c       	mov	r9, r1
     d76:	21 2c       	mov	r2, r1
     d78:	31 2c       	mov	r3, r1
     d7a:	ff e1       	ldi	r31, 0x1F	; 31
     d7c:	f3 15       	cp	r31, r3
     d7e:	d8 f0       	brcs	.+54     	; 0xdb6 <vfprintf+0x98>
     d80:	8b 32       	cpi	r24, 0x2B	; 43
     d82:	79 f0       	breq	.+30     	; 0xda2 <vfprintf+0x84>
     d84:	38 f4       	brcc	.+14     	; 0xd94 <vfprintf+0x76>
     d86:	80 32       	cpi	r24, 0x20	; 32
     d88:	79 f0       	breq	.+30     	; 0xda8 <vfprintf+0x8a>
     d8a:	83 32       	cpi	r24, 0x23	; 35
     d8c:	a1 f4       	brne	.+40     	; 0xdb6 <vfprintf+0x98>
     d8e:	23 2d       	mov	r18, r3
     d90:	20 61       	ori	r18, 0x10	; 16
     d92:	1d c0       	rjmp	.+58     	; 0xdce <vfprintf+0xb0>
     d94:	8d 32       	cpi	r24, 0x2D	; 45
     d96:	61 f0       	breq	.+24     	; 0xdb0 <vfprintf+0x92>
     d98:	80 33       	cpi	r24, 0x30	; 48
     d9a:	69 f4       	brne	.+26     	; 0xdb6 <vfprintf+0x98>
     d9c:	23 2d       	mov	r18, r3
     d9e:	21 60       	ori	r18, 0x01	; 1
     da0:	16 c0       	rjmp	.+44     	; 0xdce <vfprintf+0xb0>
     da2:	83 2d       	mov	r24, r3
     da4:	82 60       	ori	r24, 0x02	; 2
     da6:	38 2e       	mov	r3, r24
     da8:	e3 2d       	mov	r30, r3
     daa:	e4 60       	ori	r30, 0x04	; 4
     dac:	3e 2e       	mov	r3, r30
     dae:	2a c0       	rjmp	.+84     	; 0xe04 <vfprintf+0xe6>
     db0:	f3 2d       	mov	r31, r3
     db2:	f8 60       	ori	r31, 0x08	; 8
     db4:	1d c0       	rjmp	.+58     	; 0xdf0 <vfprintf+0xd2>
     db6:	37 fc       	sbrc	r3, 7
     db8:	2d c0       	rjmp	.+90     	; 0xe14 <vfprintf+0xf6>
     dba:	20 ed       	ldi	r18, 0xD0	; 208
     dbc:	28 0f       	add	r18, r24
     dbe:	2a 30       	cpi	r18, 0x0A	; 10
     dc0:	40 f0       	brcs	.+16     	; 0xdd2 <vfprintf+0xb4>
     dc2:	8e 32       	cpi	r24, 0x2E	; 46
     dc4:	b9 f4       	brne	.+46     	; 0xdf4 <vfprintf+0xd6>
     dc6:	36 fc       	sbrc	r3, 6
     dc8:	81 c1       	rjmp	.+770    	; 0x10cc <vfprintf+0x3ae>
     dca:	23 2d       	mov	r18, r3
     dcc:	20 64       	ori	r18, 0x40	; 64
     dce:	32 2e       	mov	r3, r18
     dd0:	19 c0       	rjmp	.+50     	; 0xe04 <vfprintf+0xe6>
     dd2:	36 fe       	sbrs	r3, 6
     dd4:	06 c0       	rjmp	.+12     	; 0xde2 <vfprintf+0xc4>
     dd6:	8a e0       	ldi	r24, 0x0A	; 10
     dd8:	98 9e       	mul	r9, r24
     dda:	20 0d       	add	r18, r0
     ddc:	11 24       	eor	r1, r1
     dde:	92 2e       	mov	r9, r18
     de0:	11 c0       	rjmp	.+34     	; 0xe04 <vfprintf+0xe6>
     de2:	ea e0       	ldi	r30, 0x0A	; 10
     de4:	2e 9e       	mul	r2, r30
     de6:	20 0d       	add	r18, r0
     de8:	11 24       	eor	r1, r1
     dea:	22 2e       	mov	r2, r18
     dec:	f3 2d       	mov	r31, r3
     dee:	f0 62       	ori	r31, 0x20	; 32
     df0:	3f 2e       	mov	r3, r31
     df2:	08 c0       	rjmp	.+16     	; 0xe04 <vfprintf+0xe6>
     df4:	8c 36       	cpi	r24, 0x6C	; 108
     df6:	21 f4       	brne	.+8      	; 0xe00 <vfprintf+0xe2>
     df8:	83 2d       	mov	r24, r3
     dfa:	80 68       	ori	r24, 0x80	; 128
     dfc:	38 2e       	mov	r3, r24
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <vfprintf+0xe6>
     e00:	88 36       	cpi	r24, 0x68	; 104
     e02:	41 f4       	brne	.+16     	; 0xe14 <vfprintf+0xf6>
     e04:	f7 01       	movw	r30, r14
     e06:	93 fd       	sbrc	r25, 3
     e08:	85 91       	lpm	r24, Z+
     e0a:	93 ff       	sbrs	r25, 3
     e0c:	81 91       	ld	r24, Z+
     e0e:	7f 01       	movw	r14, r30
     e10:	81 11       	cpse	r24, r1
     e12:	b3 cf       	rjmp	.-154    	; 0xd7a <vfprintf+0x5c>
     e14:	98 2f       	mov	r25, r24
     e16:	9f 7d       	andi	r25, 0xDF	; 223
     e18:	95 54       	subi	r25, 0x45	; 69
     e1a:	93 30       	cpi	r25, 0x03	; 3
     e1c:	28 f4       	brcc	.+10     	; 0xe28 <vfprintf+0x10a>
     e1e:	0c 5f       	subi	r16, 0xFC	; 252
     e20:	1f 4f       	sbci	r17, 0xFF	; 255
     e22:	9f e3       	ldi	r25, 0x3F	; 63
     e24:	99 83       	std	Y+1, r25	; 0x01
     e26:	0d c0       	rjmp	.+26     	; 0xe42 <vfprintf+0x124>
     e28:	83 36       	cpi	r24, 0x63	; 99
     e2a:	31 f0       	breq	.+12     	; 0xe38 <vfprintf+0x11a>
     e2c:	83 37       	cpi	r24, 0x73	; 115
     e2e:	71 f0       	breq	.+28     	; 0xe4c <vfprintf+0x12e>
     e30:	83 35       	cpi	r24, 0x53	; 83
     e32:	09 f0       	breq	.+2      	; 0xe36 <vfprintf+0x118>
     e34:	59 c0       	rjmp	.+178    	; 0xee8 <vfprintf+0x1ca>
     e36:	21 c0       	rjmp	.+66     	; 0xe7a <vfprintf+0x15c>
     e38:	f8 01       	movw	r30, r16
     e3a:	80 81       	ld	r24, Z
     e3c:	89 83       	std	Y+1, r24	; 0x01
     e3e:	0e 5f       	subi	r16, 0xFE	; 254
     e40:	1f 4f       	sbci	r17, 0xFF	; 255
     e42:	88 24       	eor	r8, r8
     e44:	83 94       	inc	r8
     e46:	91 2c       	mov	r9, r1
     e48:	53 01       	movw	r10, r6
     e4a:	13 c0       	rjmp	.+38     	; 0xe72 <vfprintf+0x154>
     e4c:	28 01       	movw	r4, r16
     e4e:	f2 e0       	ldi	r31, 0x02	; 2
     e50:	4f 0e       	add	r4, r31
     e52:	51 1c       	adc	r5, r1
     e54:	f8 01       	movw	r30, r16
     e56:	a0 80       	ld	r10, Z
     e58:	b1 80       	ldd	r11, Z+1	; 0x01
     e5a:	36 fe       	sbrs	r3, 6
     e5c:	03 c0       	rjmp	.+6      	; 0xe64 <vfprintf+0x146>
     e5e:	69 2d       	mov	r22, r9
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <vfprintf+0x14a>
     e64:	6f ef       	ldi	r22, 0xFF	; 255
     e66:	7f ef       	ldi	r23, 0xFF	; 255
     e68:	c5 01       	movw	r24, r10
     e6a:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <strnlen>
     e6e:	4c 01       	movw	r8, r24
     e70:	82 01       	movw	r16, r4
     e72:	f3 2d       	mov	r31, r3
     e74:	ff 77       	andi	r31, 0x7F	; 127
     e76:	3f 2e       	mov	r3, r31
     e78:	16 c0       	rjmp	.+44     	; 0xea6 <vfprintf+0x188>
     e7a:	28 01       	movw	r4, r16
     e7c:	22 e0       	ldi	r18, 0x02	; 2
     e7e:	42 0e       	add	r4, r18
     e80:	51 1c       	adc	r5, r1
     e82:	f8 01       	movw	r30, r16
     e84:	a0 80       	ld	r10, Z
     e86:	b1 80       	ldd	r11, Z+1	; 0x01
     e88:	36 fe       	sbrs	r3, 6
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <vfprintf+0x174>
     e8c:	69 2d       	mov	r22, r9
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <vfprintf+0x178>
     e92:	6f ef       	ldi	r22, 0xFF	; 255
     e94:	7f ef       	ldi	r23, 0xFF	; 255
     e96:	c5 01       	movw	r24, r10
     e98:	0e 94 70 08 	call	0x10e0	; 0x10e0 <strnlen_P>
     e9c:	4c 01       	movw	r8, r24
     e9e:	f3 2d       	mov	r31, r3
     ea0:	f0 68       	ori	r31, 0x80	; 128
     ea2:	3f 2e       	mov	r3, r31
     ea4:	82 01       	movw	r16, r4
     ea6:	33 fc       	sbrc	r3, 3
     ea8:	1b c0       	rjmp	.+54     	; 0xee0 <vfprintf+0x1c2>
     eaa:	82 2d       	mov	r24, r2
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	88 16       	cp	r8, r24
     eb0:	99 06       	cpc	r9, r25
     eb2:	b0 f4       	brcc	.+44     	; 0xee0 <vfprintf+0x1c2>
     eb4:	b6 01       	movw	r22, r12
     eb6:	80 e2       	ldi	r24, 0x20	; 32
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 86 08 	call	0x110c	; 0x110c <fputc>
     ebe:	2a 94       	dec	r2
     ec0:	f4 cf       	rjmp	.-24     	; 0xeaa <vfprintf+0x18c>
     ec2:	f5 01       	movw	r30, r10
     ec4:	37 fc       	sbrc	r3, 7
     ec6:	85 91       	lpm	r24, Z+
     ec8:	37 fe       	sbrs	r3, 7
     eca:	81 91       	ld	r24, Z+
     ecc:	5f 01       	movw	r10, r30
     ece:	b6 01       	movw	r22, r12
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	0e 94 86 08 	call	0x110c	; 0x110c <fputc>
     ed6:	21 10       	cpse	r2, r1
     ed8:	2a 94       	dec	r2
     eda:	21 e0       	ldi	r18, 0x01	; 1
     edc:	82 1a       	sub	r8, r18
     ede:	91 08       	sbc	r9, r1
     ee0:	81 14       	cp	r8, r1
     ee2:	91 04       	cpc	r9, r1
     ee4:	71 f7       	brne	.-36     	; 0xec2 <vfprintf+0x1a4>
     ee6:	e8 c0       	rjmp	.+464    	; 0x10b8 <vfprintf+0x39a>
     ee8:	84 36       	cpi	r24, 0x64	; 100
     eea:	11 f0       	breq	.+4      	; 0xef0 <vfprintf+0x1d2>
     eec:	89 36       	cpi	r24, 0x69	; 105
     eee:	41 f5       	brne	.+80     	; 0xf40 <vfprintf+0x222>
     ef0:	f8 01       	movw	r30, r16
     ef2:	37 fe       	sbrs	r3, 7
     ef4:	07 c0       	rjmp	.+14     	; 0xf04 <vfprintf+0x1e6>
     ef6:	60 81       	ld	r22, Z
     ef8:	71 81       	ldd	r23, Z+1	; 0x01
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	93 81       	ldd	r25, Z+3	; 0x03
     efe:	0c 5f       	subi	r16, 0xFC	; 252
     f00:	1f 4f       	sbci	r17, 0xFF	; 255
     f02:	08 c0       	rjmp	.+16     	; 0xf14 <vfprintf+0x1f6>
     f04:	60 81       	ld	r22, Z
     f06:	71 81       	ldd	r23, Z+1	; 0x01
     f08:	07 2e       	mov	r0, r23
     f0a:	00 0c       	add	r0, r0
     f0c:	88 0b       	sbc	r24, r24
     f0e:	99 0b       	sbc	r25, r25
     f10:	0e 5f       	subi	r16, 0xFE	; 254
     f12:	1f 4f       	sbci	r17, 0xFF	; 255
     f14:	f3 2d       	mov	r31, r3
     f16:	ff 76       	andi	r31, 0x6F	; 111
     f18:	3f 2e       	mov	r3, r31
     f1a:	97 ff       	sbrs	r25, 7
     f1c:	09 c0       	rjmp	.+18     	; 0xf30 <vfprintf+0x212>
     f1e:	90 95       	com	r25
     f20:	80 95       	com	r24
     f22:	70 95       	com	r23
     f24:	61 95       	neg	r22
     f26:	7f 4f       	sbci	r23, 0xFF	; 255
     f28:	8f 4f       	sbci	r24, 0xFF	; 255
     f2a:	9f 4f       	sbci	r25, 0xFF	; 255
     f2c:	f0 68       	ori	r31, 0x80	; 128
     f2e:	3f 2e       	mov	r3, r31
     f30:	2a e0       	ldi	r18, 0x0A	; 10
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	a3 01       	movw	r20, r6
     f36:	0e 94 c2 08 	call	0x1184	; 0x1184 <__ultoa_invert>
     f3a:	88 2e       	mov	r8, r24
     f3c:	86 18       	sub	r8, r6
     f3e:	45 c0       	rjmp	.+138    	; 0xfca <vfprintf+0x2ac>
     f40:	85 37       	cpi	r24, 0x75	; 117
     f42:	31 f4       	brne	.+12     	; 0xf50 <vfprintf+0x232>
     f44:	23 2d       	mov	r18, r3
     f46:	2f 7e       	andi	r18, 0xEF	; 239
     f48:	b2 2e       	mov	r11, r18
     f4a:	2a e0       	ldi	r18, 0x0A	; 10
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	25 c0       	rjmp	.+74     	; 0xf9a <vfprintf+0x27c>
     f50:	93 2d       	mov	r25, r3
     f52:	99 7f       	andi	r25, 0xF9	; 249
     f54:	b9 2e       	mov	r11, r25
     f56:	8f 36       	cpi	r24, 0x6F	; 111
     f58:	c1 f0       	breq	.+48     	; 0xf8a <vfprintf+0x26c>
     f5a:	18 f4       	brcc	.+6      	; 0xf62 <vfprintf+0x244>
     f5c:	88 35       	cpi	r24, 0x58	; 88
     f5e:	79 f0       	breq	.+30     	; 0xf7e <vfprintf+0x260>
     f60:	b5 c0       	rjmp	.+362    	; 0x10cc <vfprintf+0x3ae>
     f62:	80 37       	cpi	r24, 0x70	; 112
     f64:	19 f0       	breq	.+6      	; 0xf6c <vfprintf+0x24e>
     f66:	88 37       	cpi	r24, 0x78	; 120
     f68:	21 f0       	breq	.+8      	; 0xf72 <vfprintf+0x254>
     f6a:	b0 c0       	rjmp	.+352    	; 0x10cc <vfprintf+0x3ae>
     f6c:	e9 2f       	mov	r30, r25
     f6e:	e0 61       	ori	r30, 0x10	; 16
     f70:	be 2e       	mov	r11, r30
     f72:	b4 fe       	sbrs	r11, 4
     f74:	0d c0       	rjmp	.+26     	; 0xf90 <vfprintf+0x272>
     f76:	fb 2d       	mov	r31, r11
     f78:	f4 60       	ori	r31, 0x04	; 4
     f7a:	bf 2e       	mov	r11, r31
     f7c:	09 c0       	rjmp	.+18     	; 0xf90 <vfprintf+0x272>
     f7e:	34 fe       	sbrs	r3, 4
     f80:	0a c0       	rjmp	.+20     	; 0xf96 <vfprintf+0x278>
     f82:	29 2f       	mov	r18, r25
     f84:	26 60       	ori	r18, 0x06	; 6
     f86:	b2 2e       	mov	r11, r18
     f88:	06 c0       	rjmp	.+12     	; 0xf96 <vfprintf+0x278>
     f8a:	28 e0       	ldi	r18, 0x08	; 8
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	05 c0       	rjmp	.+10     	; 0xf9a <vfprintf+0x27c>
     f90:	20 e1       	ldi	r18, 0x10	; 16
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <vfprintf+0x27c>
     f96:	20 e1       	ldi	r18, 0x10	; 16
     f98:	32 e0       	ldi	r19, 0x02	; 2
     f9a:	f8 01       	movw	r30, r16
     f9c:	b7 fe       	sbrs	r11, 7
     f9e:	07 c0       	rjmp	.+14     	; 0xfae <vfprintf+0x290>
     fa0:	60 81       	ld	r22, Z
     fa2:	71 81       	ldd	r23, Z+1	; 0x01
     fa4:	82 81       	ldd	r24, Z+2	; 0x02
     fa6:	93 81       	ldd	r25, Z+3	; 0x03
     fa8:	0c 5f       	subi	r16, 0xFC	; 252
     faa:	1f 4f       	sbci	r17, 0xFF	; 255
     fac:	06 c0       	rjmp	.+12     	; 0xfba <vfprintf+0x29c>
     fae:	60 81       	ld	r22, Z
     fb0:	71 81       	ldd	r23, Z+1	; 0x01
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 5f       	subi	r16, 0xFE	; 254
     fb8:	1f 4f       	sbci	r17, 0xFF	; 255
     fba:	a3 01       	movw	r20, r6
     fbc:	0e 94 c2 08 	call	0x1184	; 0x1184 <__ultoa_invert>
     fc0:	88 2e       	mov	r8, r24
     fc2:	86 18       	sub	r8, r6
     fc4:	fb 2d       	mov	r31, r11
     fc6:	ff 77       	andi	r31, 0x7F	; 127
     fc8:	3f 2e       	mov	r3, r31
     fca:	36 fe       	sbrs	r3, 6
     fcc:	0d c0       	rjmp	.+26     	; 0xfe8 <vfprintf+0x2ca>
     fce:	23 2d       	mov	r18, r3
     fd0:	2e 7f       	andi	r18, 0xFE	; 254
     fd2:	a2 2e       	mov	r10, r18
     fd4:	89 14       	cp	r8, r9
     fd6:	58 f4       	brcc	.+22     	; 0xfee <vfprintf+0x2d0>
     fd8:	34 fe       	sbrs	r3, 4
     fda:	0b c0       	rjmp	.+22     	; 0xff2 <vfprintf+0x2d4>
     fdc:	32 fc       	sbrc	r3, 2
     fde:	09 c0       	rjmp	.+18     	; 0xff2 <vfprintf+0x2d4>
     fe0:	83 2d       	mov	r24, r3
     fe2:	8e 7e       	andi	r24, 0xEE	; 238
     fe4:	a8 2e       	mov	r10, r24
     fe6:	05 c0       	rjmp	.+10     	; 0xff2 <vfprintf+0x2d4>
     fe8:	b8 2c       	mov	r11, r8
     fea:	a3 2c       	mov	r10, r3
     fec:	03 c0       	rjmp	.+6      	; 0xff4 <vfprintf+0x2d6>
     fee:	b8 2c       	mov	r11, r8
     ff0:	01 c0       	rjmp	.+2      	; 0xff4 <vfprintf+0x2d6>
     ff2:	b9 2c       	mov	r11, r9
     ff4:	a4 fe       	sbrs	r10, 4
     ff6:	0f c0       	rjmp	.+30     	; 0x1016 <vfprintf+0x2f8>
     ff8:	fe 01       	movw	r30, r28
     ffa:	e8 0d       	add	r30, r8
     ffc:	f1 1d       	adc	r31, r1
     ffe:	80 81       	ld	r24, Z
    1000:	80 33       	cpi	r24, 0x30	; 48
    1002:	21 f4       	brne	.+8      	; 0x100c <vfprintf+0x2ee>
    1004:	9a 2d       	mov	r25, r10
    1006:	99 7e       	andi	r25, 0xE9	; 233
    1008:	a9 2e       	mov	r10, r25
    100a:	09 c0       	rjmp	.+18     	; 0x101e <vfprintf+0x300>
    100c:	a2 fe       	sbrs	r10, 2
    100e:	06 c0       	rjmp	.+12     	; 0x101c <vfprintf+0x2fe>
    1010:	b3 94       	inc	r11
    1012:	b3 94       	inc	r11
    1014:	04 c0       	rjmp	.+8      	; 0x101e <vfprintf+0x300>
    1016:	8a 2d       	mov	r24, r10
    1018:	86 78       	andi	r24, 0x86	; 134
    101a:	09 f0       	breq	.+2      	; 0x101e <vfprintf+0x300>
    101c:	b3 94       	inc	r11
    101e:	a3 fc       	sbrc	r10, 3
    1020:	11 c0       	rjmp	.+34     	; 0x1044 <vfprintf+0x326>
    1022:	a0 fe       	sbrs	r10, 0
    1024:	06 c0       	rjmp	.+12     	; 0x1032 <vfprintf+0x314>
    1026:	b2 14       	cp	r11, r2
    1028:	88 f4       	brcc	.+34     	; 0x104c <vfprintf+0x32e>
    102a:	28 0c       	add	r2, r8
    102c:	92 2c       	mov	r9, r2
    102e:	9b 18       	sub	r9, r11
    1030:	0e c0       	rjmp	.+28     	; 0x104e <vfprintf+0x330>
    1032:	b2 14       	cp	r11, r2
    1034:	60 f4       	brcc	.+24     	; 0x104e <vfprintf+0x330>
    1036:	b6 01       	movw	r22, r12
    1038:	80 e2       	ldi	r24, 0x20	; 32
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 86 08 	call	0x110c	; 0x110c <fputc>
    1040:	b3 94       	inc	r11
    1042:	f7 cf       	rjmp	.-18     	; 0x1032 <vfprintf+0x314>
    1044:	b2 14       	cp	r11, r2
    1046:	18 f4       	brcc	.+6      	; 0x104e <vfprintf+0x330>
    1048:	2b 18       	sub	r2, r11
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <vfprintf+0x332>
    104c:	98 2c       	mov	r9, r8
    104e:	21 2c       	mov	r2, r1
    1050:	a4 fe       	sbrs	r10, 4
    1052:	10 c0       	rjmp	.+32     	; 0x1074 <vfprintf+0x356>
    1054:	b6 01       	movw	r22, r12
    1056:	80 e3       	ldi	r24, 0x30	; 48
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 86 08 	call	0x110c	; 0x110c <fputc>
    105e:	a2 fe       	sbrs	r10, 2
    1060:	17 c0       	rjmp	.+46     	; 0x1090 <vfprintf+0x372>
    1062:	a1 fc       	sbrc	r10, 1
    1064:	03 c0       	rjmp	.+6      	; 0x106c <vfprintf+0x34e>
    1066:	88 e7       	ldi	r24, 0x78	; 120
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <vfprintf+0x352>
    106c:	88 e5       	ldi	r24, 0x58	; 88
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	b6 01       	movw	r22, r12
    1072:	0c c0       	rjmp	.+24     	; 0x108c <vfprintf+0x36e>
    1074:	8a 2d       	mov	r24, r10
    1076:	86 78       	andi	r24, 0x86	; 134
    1078:	59 f0       	breq	.+22     	; 0x1090 <vfprintf+0x372>
    107a:	a1 fe       	sbrs	r10, 1
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <vfprintf+0x364>
    107e:	8b e2       	ldi	r24, 0x2B	; 43
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <vfprintf+0x366>
    1082:	80 e2       	ldi	r24, 0x20	; 32
    1084:	a7 fc       	sbrc	r10, 7
    1086:	8d e2       	ldi	r24, 0x2D	; 45
    1088:	b6 01       	movw	r22, r12
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 86 08 	call	0x110c	; 0x110c <fputc>
    1090:	89 14       	cp	r8, r9
    1092:	38 f4       	brcc	.+14     	; 0x10a2 <vfprintf+0x384>
    1094:	b6 01       	movw	r22, r12
    1096:	80 e3       	ldi	r24, 0x30	; 48
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 86 08 	call	0x110c	; 0x110c <fputc>
    109e:	9a 94       	dec	r9
    10a0:	f7 cf       	rjmp	.-18     	; 0x1090 <vfprintf+0x372>
    10a2:	8a 94       	dec	r8
    10a4:	f3 01       	movw	r30, r6
    10a6:	e8 0d       	add	r30, r8
    10a8:	f1 1d       	adc	r31, r1
    10aa:	80 81       	ld	r24, Z
    10ac:	b6 01       	movw	r22, r12
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 86 08 	call	0x110c	; 0x110c <fputc>
    10b4:	81 10       	cpse	r8, r1
    10b6:	f5 cf       	rjmp	.-22     	; 0x10a2 <vfprintf+0x384>
    10b8:	22 20       	and	r2, r2
    10ba:	09 f4       	brne	.+2      	; 0x10be <vfprintf+0x3a0>
    10bc:	42 ce       	rjmp	.-892    	; 0xd42 <vfprintf+0x24>
    10be:	b6 01       	movw	r22, r12
    10c0:	80 e2       	ldi	r24, 0x20	; 32
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 86 08 	call	0x110c	; 0x110c <fputc>
    10c8:	2a 94       	dec	r2
    10ca:	f6 cf       	rjmp	.-20     	; 0x10b8 <vfprintf+0x39a>
    10cc:	f6 01       	movw	r30, r12
    10ce:	86 81       	ldd	r24, Z+6	; 0x06
    10d0:	97 81       	ldd	r25, Z+7	; 0x07
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <vfprintf+0x3ba>
    10d4:	8f ef       	ldi	r24, 0xFF	; 255
    10d6:	9f ef       	ldi	r25, 0xFF	; 255
    10d8:	2b 96       	adiw	r28, 0x0b	; 11
    10da:	e2 e1       	ldi	r30, 0x12	; 18
    10dc:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__epilogue_restores__>

000010e0 <strnlen_P>:
    10e0:	fc 01       	movw	r30, r24
    10e2:	05 90       	lpm	r0, Z+
    10e4:	61 50       	subi	r22, 0x01	; 1
    10e6:	70 40       	sbci	r23, 0x00	; 0
    10e8:	01 10       	cpse	r0, r1
    10ea:	d8 f7       	brcc	.-10     	; 0x10e2 <strnlen_P+0x2>
    10ec:	80 95       	com	r24
    10ee:	90 95       	com	r25
    10f0:	8e 0f       	add	r24, r30
    10f2:	9f 1f       	adc	r25, r31
    10f4:	08 95       	ret

000010f6 <strnlen>:
    10f6:	fc 01       	movw	r30, r24
    10f8:	61 50       	subi	r22, 0x01	; 1
    10fa:	70 40       	sbci	r23, 0x00	; 0
    10fc:	01 90       	ld	r0, Z+
    10fe:	01 10       	cpse	r0, r1
    1100:	d8 f7       	brcc	.-10     	; 0x10f8 <strnlen+0x2>
    1102:	80 95       	com	r24
    1104:	90 95       	com	r25
    1106:	8e 0f       	add	r24, r30
    1108:	9f 1f       	adc	r25, r31
    110a:	08 95       	ret

0000110c <fputc>:
    110c:	0f 93       	push	r16
    110e:	1f 93       	push	r17
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	fb 01       	movw	r30, r22
    1116:	23 81       	ldd	r18, Z+3	; 0x03
    1118:	21 fd       	sbrc	r18, 1
    111a:	03 c0       	rjmp	.+6      	; 0x1122 <fputc+0x16>
    111c:	8f ef       	ldi	r24, 0xFF	; 255
    111e:	9f ef       	ldi	r25, 0xFF	; 255
    1120:	2c c0       	rjmp	.+88     	; 0x117a <fputc+0x6e>
    1122:	22 ff       	sbrs	r18, 2
    1124:	16 c0       	rjmp	.+44     	; 0x1152 <fputc+0x46>
    1126:	46 81       	ldd	r20, Z+6	; 0x06
    1128:	57 81       	ldd	r21, Z+7	; 0x07
    112a:	24 81       	ldd	r18, Z+4	; 0x04
    112c:	35 81       	ldd	r19, Z+5	; 0x05
    112e:	42 17       	cp	r20, r18
    1130:	53 07       	cpc	r21, r19
    1132:	44 f4       	brge	.+16     	; 0x1144 <fputc+0x38>
    1134:	a0 81       	ld	r26, Z
    1136:	b1 81       	ldd	r27, Z+1	; 0x01
    1138:	9d 01       	movw	r18, r26
    113a:	2f 5f       	subi	r18, 0xFF	; 255
    113c:	3f 4f       	sbci	r19, 0xFF	; 255
    113e:	31 83       	std	Z+1, r19	; 0x01
    1140:	20 83       	st	Z, r18
    1142:	8c 93       	st	X, r24
    1144:	26 81       	ldd	r18, Z+6	; 0x06
    1146:	37 81       	ldd	r19, Z+7	; 0x07
    1148:	2f 5f       	subi	r18, 0xFF	; 255
    114a:	3f 4f       	sbci	r19, 0xFF	; 255
    114c:	37 83       	std	Z+7, r19	; 0x07
    114e:	26 83       	std	Z+6, r18	; 0x06
    1150:	14 c0       	rjmp	.+40     	; 0x117a <fputc+0x6e>
    1152:	8b 01       	movw	r16, r22
    1154:	ec 01       	movw	r28, r24
    1156:	fb 01       	movw	r30, r22
    1158:	00 84       	ldd	r0, Z+8	; 0x08
    115a:	f1 85       	ldd	r31, Z+9	; 0x09
    115c:	e0 2d       	mov	r30, r0
    115e:	09 95       	icall
    1160:	89 2b       	or	r24, r25
    1162:	e1 f6       	brne	.-72     	; 0x111c <fputc+0x10>
    1164:	d8 01       	movw	r26, r16
    1166:	16 96       	adiw	r26, 0x06	; 6
    1168:	8d 91       	ld	r24, X+
    116a:	9c 91       	ld	r25, X
    116c:	17 97       	sbiw	r26, 0x07	; 7
    116e:	01 96       	adiw	r24, 0x01	; 1
    1170:	17 96       	adiw	r26, 0x07	; 7
    1172:	9c 93       	st	X, r25
    1174:	8e 93       	st	-X, r24
    1176:	16 97       	sbiw	r26, 0x06	; 6
    1178:	ce 01       	movw	r24, r28
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	1f 91       	pop	r17
    1180:	0f 91       	pop	r16
    1182:	08 95       	ret

00001184 <__ultoa_invert>:
    1184:	fa 01       	movw	r30, r20
    1186:	aa 27       	eor	r26, r26
    1188:	28 30       	cpi	r18, 0x08	; 8
    118a:	51 f1       	breq	.+84     	; 0x11e0 <__ultoa_invert+0x5c>
    118c:	20 31       	cpi	r18, 0x10	; 16
    118e:	81 f1       	breq	.+96     	; 0x11f0 <__ultoa_invert+0x6c>
    1190:	e8 94       	clt
    1192:	6f 93       	push	r22
    1194:	6e 7f       	andi	r22, 0xFE	; 254
    1196:	6e 5f       	subi	r22, 0xFE	; 254
    1198:	7f 4f       	sbci	r23, 0xFF	; 255
    119a:	8f 4f       	sbci	r24, 0xFF	; 255
    119c:	9f 4f       	sbci	r25, 0xFF	; 255
    119e:	af 4f       	sbci	r26, 0xFF	; 255
    11a0:	b1 e0       	ldi	r27, 0x01	; 1
    11a2:	3e d0       	rcall	.+124    	; 0x1220 <__ultoa_invert+0x9c>
    11a4:	b4 e0       	ldi	r27, 0x04	; 4
    11a6:	3c d0       	rcall	.+120    	; 0x1220 <__ultoa_invert+0x9c>
    11a8:	67 0f       	add	r22, r23
    11aa:	78 1f       	adc	r23, r24
    11ac:	89 1f       	adc	r24, r25
    11ae:	9a 1f       	adc	r25, r26
    11b0:	a1 1d       	adc	r26, r1
    11b2:	68 0f       	add	r22, r24
    11b4:	79 1f       	adc	r23, r25
    11b6:	8a 1f       	adc	r24, r26
    11b8:	91 1d       	adc	r25, r1
    11ba:	a1 1d       	adc	r26, r1
    11bc:	6a 0f       	add	r22, r26
    11be:	71 1d       	adc	r23, r1
    11c0:	81 1d       	adc	r24, r1
    11c2:	91 1d       	adc	r25, r1
    11c4:	a1 1d       	adc	r26, r1
    11c6:	20 d0       	rcall	.+64     	; 0x1208 <__ultoa_invert+0x84>
    11c8:	09 f4       	brne	.+2      	; 0x11cc <__ultoa_invert+0x48>
    11ca:	68 94       	set
    11cc:	3f 91       	pop	r19
    11ce:	2a e0       	ldi	r18, 0x0A	; 10
    11d0:	26 9f       	mul	r18, r22
    11d2:	11 24       	eor	r1, r1
    11d4:	30 19       	sub	r19, r0
    11d6:	30 5d       	subi	r19, 0xD0	; 208
    11d8:	31 93       	st	Z+, r19
    11da:	de f6       	brtc	.-74     	; 0x1192 <__ultoa_invert+0xe>
    11dc:	cf 01       	movw	r24, r30
    11de:	08 95       	ret
    11e0:	46 2f       	mov	r20, r22
    11e2:	47 70       	andi	r20, 0x07	; 7
    11e4:	40 5d       	subi	r20, 0xD0	; 208
    11e6:	41 93       	st	Z+, r20
    11e8:	b3 e0       	ldi	r27, 0x03	; 3
    11ea:	0f d0       	rcall	.+30     	; 0x120a <__ultoa_invert+0x86>
    11ec:	c9 f7       	brne	.-14     	; 0x11e0 <__ultoa_invert+0x5c>
    11ee:	f6 cf       	rjmp	.-20     	; 0x11dc <__ultoa_invert+0x58>
    11f0:	46 2f       	mov	r20, r22
    11f2:	4f 70       	andi	r20, 0x0F	; 15
    11f4:	40 5d       	subi	r20, 0xD0	; 208
    11f6:	4a 33       	cpi	r20, 0x3A	; 58
    11f8:	18 f0       	brcs	.+6      	; 0x1200 <__ultoa_invert+0x7c>
    11fa:	49 5d       	subi	r20, 0xD9	; 217
    11fc:	31 fd       	sbrc	r19, 1
    11fe:	40 52       	subi	r20, 0x20	; 32
    1200:	41 93       	st	Z+, r20
    1202:	02 d0       	rcall	.+4      	; 0x1208 <__ultoa_invert+0x84>
    1204:	a9 f7       	brne	.-22     	; 0x11f0 <__ultoa_invert+0x6c>
    1206:	ea cf       	rjmp	.-44     	; 0x11dc <__ultoa_invert+0x58>
    1208:	b4 e0       	ldi	r27, 0x04	; 4
    120a:	a6 95       	lsr	r26
    120c:	97 95       	ror	r25
    120e:	87 95       	ror	r24
    1210:	77 95       	ror	r23
    1212:	67 95       	ror	r22
    1214:	ba 95       	dec	r27
    1216:	c9 f7       	brne	.-14     	; 0x120a <__ultoa_invert+0x86>
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	61 05       	cpc	r22, r1
    121c:	71 05       	cpc	r23, r1
    121e:	08 95       	ret
    1220:	9b 01       	movw	r18, r22
    1222:	ac 01       	movw	r20, r24
    1224:	0a 2e       	mov	r0, r26
    1226:	06 94       	lsr	r0
    1228:	57 95       	ror	r21
    122a:	47 95       	ror	r20
    122c:	37 95       	ror	r19
    122e:	27 95       	ror	r18
    1230:	ba 95       	dec	r27
    1232:	c9 f7       	brne	.-14     	; 0x1226 <__ultoa_invert+0xa2>
    1234:	62 0f       	add	r22, r18
    1236:	73 1f       	adc	r23, r19
    1238:	84 1f       	adc	r24, r20
    123a:	95 1f       	adc	r25, r21
    123c:	a0 1d       	adc	r26, r0
    123e:	08 95       	ret

00001240 <__prologue_saves__>:
    1240:	2f 92       	push	r2
    1242:	3f 92       	push	r3
    1244:	4f 92       	push	r4
    1246:	5f 92       	push	r5
    1248:	6f 92       	push	r6
    124a:	7f 92       	push	r7
    124c:	8f 92       	push	r8
    124e:	9f 92       	push	r9
    1250:	af 92       	push	r10
    1252:	bf 92       	push	r11
    1254:	cf 92       	push	r12
    1256:	df 92       	push	r13
    1258:	ef 92       	push	r14
    125a:	ff 92       	push	r15
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	ca 1b       	sub	r28, r26
    126a:	db 0b       	sbc	r29, r27
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	de bf       	out	0x3e, r29	; 62
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	cd bf       	out	0x3d, r28	; 61
    1276:	09 94       	ijmp

00001278 <__epilogue_restores__>:
    1278:	2a 88       	ldd	r2, Y+18	; 0x12
    127a:	39 88       	ldd	r3, Y+17	; 0x11
    127c:	48 88       	ldd	r4, Y+16	; 0x10
    127e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1280:	6e 84       	ldd	r6, Y+14	; 0x0e
    1282:	7d 84       	ldd	r7, Y+13	; 0x0d
    1284:	8c 84       	ldd	r8, Y+12	; 0x0c
    1286:	9b 84       	ldd	r9, Y+11	; 0x0b
    1288:	aa 84       	ldd	r10, Y+10	; 0x0a
    128a:	b9 84       	ldd	r11, Y+9	; 0x09
    128c:	c8 84       	ldd	r12, Y+8	; 0x08
    128e:	df 80       	ldd	r13, Y+7	; 0x07
    1290:	ee 80       	ldd	r14, Y+6	; 0x06
    1292:	fd 80       	ldd	r15, Y+5	; 0x05
    1294:	0c 81       	ldd	r16, Y+4	; 0x04
    1296:	1b 81       	ldd	r17, Y+3	; 0x03
    1298:	aa 81       	ldd	r26, Y+2	; 0x02
    129a:	b9 81       	ldd	r27, Y+1	; 0x01
    129c:	ce 0f       	add	r28, r30
    129e:	d1 1d       	adc	r29, r1
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	cd bf       	out	0x3d, r28	; 61
    12aa:	ed 01       	movw	r28, r26
    12ac:	08 95       	ret

000012ae <_exit>:
    12ae:	f8 94       	cli

000012b0 <__stop_program>:
    12b0:	ff cf       	rjmp	.-2      	; 0x12b0 <__stop_program>
